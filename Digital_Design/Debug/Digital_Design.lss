
Digital_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000103e  000010d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000103e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000089d  00800208  00800208  000010da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028eb  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001262  00000000  00000000  00003cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001474  00000000  00000000  00004f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  000063b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0b  00000000  00000000  00006a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001553  00000000  00000000  0000750b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00008a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
       2:	00 00       	nop
       4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
      12:	00 00       	nop
      14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
      16:	00 00       	nop
      18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
      32:	00 00       	nop
      34:	f6 c1       	rjmp	.+1004   	; 0x422 <__bad_interrupt>
      36:	00 00       	nop
      38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c1       	rjmp	.+988    	; 0x422 <__bad_interrupt>
      46:	00 00       	nop
      48:	d5 c3       	rjmp	.+1962   	; 0x7f4 <__vector_18>
      4a:	00 00       	nop
      4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
      52:	00 00       	nop
      54:	e6 c1       	rjmp	.+972    	; 0x422 <__bad_interrupt>
      56:	00 00       	nop
      58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c3       	rjmp	.+1954   	; 0x808 <__vector_25>
      66:	00 00       	nop
      68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c3       	rjmp	.+1706   	; 0x720 <__vector_29>
      76:	00 00       	nop
      78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
      82:	00 00       	nop
      84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c8 c1       	rjmp	.+912    	; 0x422 <__bad_interrupt>
      92:	00 00       	nop
      94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
      96:	00 00       	nop
      98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bc c1       	rjmp	.+888    	; 0x422 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      ec:	00 00       	nop
      ee:	5f 00       	.word	0x005f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	07 00       	.word	0x0007	; ????
      f8:	07 00       	.word	0x0007	; ????
      fa:	00 00       	nop
      fc:	00 14       	cp	r0, r0
      fe:	7f 14       	cp	r7, r15
     100:	7f 14       	cp	r7, r15
     102:	00 00       	nop
     104:	00 24       	eor	r0, r0
     106:	2a 7f       	andi	r18, 0xFA	; 250
     108:	2a 12       	cpse	r2, r26
     10a:	00 00       	nop
     10c:	00 23       	and	r16, r16
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	00 00       	nop
     114:	00 36       	cpi	r16, 0x60	; 96
     116:	49 55       	subi	r20, 0x59	; 89
     118:	22 50       	subi	r18, 0x02	; 2
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	05 03       	mulsu	r16, r21
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 1c       	adc	r0, r0
     126:	22 41       	sbci	r18, 0x12	; 18
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 41       	sbci	r16, 0x10	; 16
     12e:	22 1c       	adc	r2, r2
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	2a 1c       	adc	r2, r10
     138:	2a 08       	sbc	r2, r10
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 00       	nop
     144:	00 a0       	ldd	r0, Z+32	; 0x20
     146:	60 00       	.word	0x0060	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	08 08       	sbc	r0, r8
     150:	08 08       	sbc	r0, r8
     152:	00 00       	nop
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 20       	and	r0, r0
     15e:	10 08       	sbc	r1, r0
     160:	04 02       	muls	r16, r20
     162:	00 00       	nop
     164:	00 3e       	cpi	r16, 0xE0	; 224
     166:	51 49       	sbci	r21, 0x91	; 145
     168:	45 3e       	cpi	r20, 0xE5	; 229
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	00 00       	nop
     174:	00 62       	ori	r16, 0x20	; 32
     176:	51 49       	sbci	r21, 0x91	; 145
     178:	49 46       	sbci	r20, 0x69	; 105
     17a:	00 00       	nop
     17c:	00 22       	and	r0, r16
     17e:	41 49       	sbci	r20, 0x91	; 145
     180:	49 36       	cpi	r20, 0x69	; 105
     182:	00 00       	nop
     184:	00 18       	sub	r0, r0
     186:	14 12       	cpse	r1, r20
     188:	7f 10       	cpse	r7, r15
     18a:	00 00       	nop
     18c:	00 27       	eor	r16, r16
     18e:	45 45       	sbci	r20, 0x55	; 85
     190:	45 39       	cpi	r20, 0x95	; 149
     192:	00 00       	nop
     194:	00 3c       	cpi	r16, 0xC0	; 192
     196:	4a 49       	sbci	r20, 0x9A	; 154
     198:	49 30       	cpi	r20, 0x09	; 9
     19a:	00 00       	nop
     19c:	00 01       	movw	r0, r0
     19e:	71 09       	sbc	r23, r1
     1a0:	05 03       	mulsu	r16, r21
     1a2:	00 00       	nop
     1a4:	00 36       	cpi	r16, 0x60	; 96
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	49 36       	cpi	r20, 0x69	; 105
     1aa:	00 00       	nop
     1ac:	00 06       	cpc	r0, r16
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	29 1e       	adc	r2, r25
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	36 36       	cpi	r19, 0x66	; 102
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	ac 6c       	ori	r26, 0xCC	; 204
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 00       	.word	0x0041	; ????
     1ca:	00 00       	nop
     1cc:	00 14       	cp	r0, r0
     1ce:	14 14       	cp	r1, r4
     1d0:	14 14       	cp	r1, r4
     1d2:	00 00       	nop
     1d4:	00 41       	sbci	r16, 0x10	; 16
     1d6:	22 14       	cp	r2, r2
     1d8:	08 00       	.word	0x0008	; ????
     1da:	00 00       	nop
     1dc:	00 02       	muls	r16, r16
     1de:	01 51       	subi	r16, 0x11	; 17
     1e0:	09 06       	cpc	r0, r25
     1e2:	00 00       	nop
     1e4:	00 32       	cpi	r16, 0x20	; 32
     1e6:	49 79       	andi	r20, 0x99	; 153
     1e8:	41 3e       	cpi	r20, 0xE1	; 225
     1ea:	00 00       	nop
     1ec:	00 7e       	andi	r16, 0xE0	; 224
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 7e       	andi	r16, 0xE9	; 233
     1f2:	00 00       	nop
     1f4:	00 7f       	andi	r16, 0xF0	; 240
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	49 36       	cpi	r20, 0x69	; 105
     1fa:	00 00       	nop
     1fc:	00 3e       	cpi	r16, 0xE0	; 224
     1fe:	41 41       	sbci	r20, 0x11	; 17
     200:	41 22       	and	r4, r17
     202:	00 00       	nop
     204:	00 7f       	andi	r16, 0xF0	; 240
     206:	41 41       	sbci	r20, 0x11	; 17
     208:	22 1c       	adc	r2, r2
     20a:	00 00       	nop
     20c:	00 7f       	andi	r16, 0xF0	; 240
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	49 41       	sbci	r20, 0x19	; 25
     212:	00 00       	nop
     214:	00 7f       	andi	r16, 0xF0	; 240
     216:	09 09       	sbc	r16, r9
     218:	09 01       	movw	r0, r18
     21a:	00 00       	nop
     21c:	00 3e       	cpi	r16, 0xE0	; 224
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	51 72       	andi	r21, 0x21	; 33
     222:	00 00       	nop
     224:	00 7f       	andi	r16, 0xF0	; 240
     226:	08 08       	sbc	r0, r8
     228:	08 7f       	andi	r16, 0xF8	; 248
     22a:	00 00       	nop
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	00 00       	nop
     232:	00 00       	nop
     234:	00 20       	and	r0, r0
     236:	40 41       	sbci	r20, 0x10	; 16
     238:	3f 01       	movw	r6, r30
     23a:	00 00       	nop
     23c:	00 7f       	andi	r16, 0xF0	; 240
     23e:	08 14       	cp	r0, r8
     240:	22 41       	sbci	r18, 0x12	; 18
     242:	00 00       	nop
     244:	00 7f       	andi	r16, 0xF0	; 240
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	00 00       	nop
     24c:	00 7f       	andi	r16, 0xF0	; 240
     24e:	02 0c       	add	r0, r2
     250:	02 7f       	andi	r16, 0xF2	; 242
     252:	00 00       	nop
     254:	00 7f       	andi	r16, 0xF0	; 240
     256:	04 08       	sbc	r0, r4
     258:	10 7f       	andi	r17, 0xF0	; 240
     25a:	00 00       	nop
     25c:	00 3e       	cpi	r16, 0xE0	; 224
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 3e       	cpi	r20, 0xE1	; 225
     262:	00 00       	nop
     264:	00 7f       	andi	r16, 0xF0	; 240
     266:	09 09       	sbc	r16, r9
     268:	09 06       	cpc	r0, r25
     26a:	00 00       	nop
     26c:	00 3e       	cpi	r16, 0xE0	; 224
     26e:	41 51       	subi	r20, 0x11	; 17
     270:	21 5e       	subi	r18, 0xE1	; 225
     272:	00 00       	nop
     274:	00 7f       	andi	r16, 0xF0	; 240
     276:	09 19       	sub	r16, r9
     278:	29 46       	sbci	r18, 0x69	; 105
     27a:	00 00       	nop
     27c:	00 26       	eor	r0, r16
     27e:	49 49       	sbci	r20, 0x99	; 153
     280:	49 32       	cpi	r20, 0x29	; 41
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
     286:	01 7f       	andi	r16, 0xF1	; 241
     288:	01 01       	movw	r0, r2
     28a:	00 00       	nop
     28c:	00 3f       	cpi	r16, 0xF0	; 240
     28e:	40 40       	sbci	r20, 0x00	; 0
     290:	40 3f       	cpi	r20, 0xF0	; 240
     292:	00 00       	nop
     294:	00 1f       	adc	r16, r16
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	20 1f       	adc	r18, r16
     29a:	00 00       	nop
     29c:	00 3f       	cpi	r16, 0xF0	; 240
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 63       	ori	r16, 0x30	; 48
     2a6:	14 08       	sbc	r1, r4
     2a8:	14 63       	ori	r17, 0x34	; 52
     2aa:	00 00       	nop
     2ac:	00 03       	mulsu	r16, r16
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 03       	mulsu	r16, r20
     2b2:	00 00       	nop
     2b4:	00 61       	ori	r16, 0x10	; 16
     2b6:	51 49       	sbci	r21, 0x91	; 145
     2b8:	45 43       	sbci	r20, 0x35	; 53
     2ba:	00 00       	nop
     2bc:	00 7f       	andi	r16, 0xF0	; 240
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 02       	muls	r16, r16
     2c6:	04 08       	sbc	r0, r4
     2c8:	10 20       	and	r1, r0
     2ca:	00 00       	nop
     2cc:	00 41       	sbci	r16, 0x10	; 16
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 04       	cpc	r0, r0
     2d6:	02 01       	movw	r0, r4
     2d8:	02 04       	cpc	r0, r2
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	80 80       	ld	r8, Z
     2e0:	80 80       	ld	r8, Z
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	02 04       	cpc	r0, r2
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 78       	andi	r21, 0x84	; 132
     2f2:	00 00       	nop
     2f4:	00 7f       	andi	r16, 0xF0	; 240
     2f6:	48 44       	sbci	r20, 0x48	; 72
     2f8:	44 38       	cpi	r20, 0x84	; 132
     2fa:	00 00       	nop
     2fc:	00 38       	cpi	r16, 0x80	; 128
     2fe:	44 44       	sbci	r20, 0x44	; 68
     300:	28 00       	.word	0x0028	; ????
     302:	00 00       	nop
     304:	00 38       	cpi	r16, 0x80	; 128
     306:	44 44       	sbci	r20, 0x44	; 68
     308:	48 7f       	andi	r20, 0xF8	; 248
     30a:	00 00       	nop
     30c:	00 38       	cpi	r16, 0x80	; 128
     30e:	54 54       	subi	r21, 0x44	; 68
     310:	54 18       	sub	r5, r4
     312:	00 00       	nop
     314:	00 08       	sbc	r0, r0
     316:	7e 09       	sbc	r23, r14
     318:	02 00       	.word	0x0002	; ????
     31a:	00 00       	nop
     31c:	00 18       	sub	r0, r0
     31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     320:	a4 7c       	andi	r26, 0xC4	; 196
     322:	00 00       	nop
     324:	00 7f       	andi	r16, 0xF0	; 240
     326:	08 04       	cpc	r0, r8
     328:	04 78       	andi	r16, 0x84	; 132
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	7d 00       	.word	0x007d	; ????
     330:	00 00       	nop
     332:	00 00       	nop
     334:	00 80       	ld	r0, Z
     336:	84 7d       	andi	r24, 0xD4	; 212
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 28       	or	r1, r0
     340:	44 00       	.word	0x0044	; ????
     342:	00 00       	nop
     344:	00 41       	sbci	r16, 0x10	; 16
     346:	7f 40       	sbci	r23, 0x0F	; 15
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 7c       	andi	r16, 0xC0	; 192
     34e:	04 18       	sub	r0, r4
     350:	04 78       	andi	r16, 0x84	; 132
     352:	00 00       	nop
     354:	00 7c       	andi	r16, 0xC0	; 192
     356:	08 04       	cpc	r0, r8
     358:	7c 00       	.word	0x007c	; ????
     35a:	00 00       	nop
     35c:	00 38       	cpi	r16, 0x80	; 128
     35e:	44 44       	sbci	r20, 0x44	; 68
     360:	38 00       	.word	0x0038	; ????
     362:	00 00       	nop
     364:	00 fc       	sbrc	r0, 0
     366:	24 24       	eor	r2, r4
     368:	18 00       	.word	0x0018	; ????
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	24 24       	eor	r2, r4
     370:	fc 00       	.word	0x00fc	; ????
     372:	00 00       	nop
     374:	00 00       	nop
     376:	7c 08       	sbc	r7, r12
     378:	04 00       	.word	0x0004	; ????
     37a:	00 00       	nop
     37c:	00 48       	sbci	r16, 0x80	; 128
     37e:	54 54       	subi	r21, 0x44	; 68
     380:	24 00       	.word	0x0024	; ????
     382:	00 00       	nop
     384:	00 04       	cpc	r0, r0
     386:	7f 44       	sbci	r23, 0x4F	; 79
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 3c       	cpi	r16, 0xC0	; 192
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	7c 00       	.word	0x007c	; ????
     392:	00 00       	nop
     394:	00 1c       	adc	r0, r0
     396:	20 40       	sbci	r18, 0x00	; 0
     398:	20 1c       	adc	r2, r0
     39a:	00 00       	nop
     39c:	00 3c       	cpi	r16, 0xC0	; 192
     39e:	40 30       	cpi	r20, 0x00	; 0
     3a0:	40 3c       	cpi	r20, 0xC0	; 192
     3a2:	00 00       	nop
     3a4:	00 44       	sbci	r16, 0x40	; 64
     3a6:	28 10       	cpse	r2, r8
     3a8:	28 44       	sbci	r18, 0x48	; 72
     3aa:	00 00       	nop
     3ac:	00 1c       	adc	r0, r0
     3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
     3b0:	7c 00       	.word	0x007c	; ????
     3b2:	00 00       	nop
     3b4:	00 44       	sbci	r16, 0x40	; 64
     3b6:	64 54       	subi	r22, 0x44	; 68
     3b8:	4c 44       	sbci	r20, 0x4C	; 76
     3ba:	00 00       	nop
     3bc:	00 08       	sbc	r0, r0
     3be:	36 41       	sbci	r19, 0x16	; 22
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 00       	nop
     3c6:	7f 00       	.word	0x007f	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	00 41       	sbci	r16, 0x10	; 16
     3ce:	36 08       	sbc	r3, r6
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 02       	muls	r16, r16
     3d6:	01 01       	movw	r0, r2
     3d8:	02 01       	movw	r0, r4
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	05 05       	cpc	r16, r5
     3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d1 e2       	ldi	r29, 0x21	; 33
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
     3f4:	12 e0       	ldi	r17, 0x02	; 2
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	ee e3       	ldi	r30, 0x3E	; 62
     3fc:	f0 e1       	ldi	r31, 0x10	; 16
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	a8 30       	cpi	r26, 0x08	; 8
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	2a e0       	ldi	r18, 0x0A	; 10
     410:	a8 e0       	ldi	r26, 0x08	; 8
     412:	b2 e0       	ldi	r27, 0x02	; 2
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a5 3a       	cpi	r26, 0xA5	; 165
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	12 d1       	rcall	.+548    	; 0x644 <main>
     420:	0c c6       	rjmp	.+3096   	; 0x103a <_exit>

00000422 <__bad_interrupt>:
     422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <init_adc>:
	ADCSRA |= (1<<ADSC);	//Start ADC sampling
	
	while(!(ADCSRA & (1<<ADIF)));
	
	return (ADCL + (ADCH<<8));
}
     424:	ea e7       	ldi	r30, 0x7A	; 122
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	90 81       	ld	r25, Z
     42a:	94 60       	ori	r25, 0x04	; 4
     42c:	90 83       	st	Z, r25
     42e:	ab e7       	ldi	r26, 0x7B	; 123
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	9c 91       	ld	r25, X
     434:	95 60       	ori	r25, 0x05	; 5
     436:	9c 93       	st	X, r25
     438:	90 81       	ld	r25, Z
     43a:	90 62       	ori	r25, 0x20	; 32
     43c:	90 83       	st	Z, r25
     43e:	90 81       	ld	r25, Z
     440:	90 68       	ori	r25, 0x80	; 128
     442:	90 83       	st	Z, r25
     444:	88 23       	and	r24, r24
     446:	19 f0       	breq	.+6      	; 0x44e <init_adc+0x2a>
     448:	80 81       	ld	r24, Z
     44a:	88 60       	ori	r24, 0x08	; 8
     44c:	80 83       	st	Z, r24
     44e:	08 95       	ret

00000450 <startADCSampling>:

//Initiates ADC on specified channel and starts sampling. Used with interrupt
void startADCSampling(char channel){
	ADMUX = channel;		//Select ADC channel
     450:	ec e7       	ldi	r30, 0x7C	; 124
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 83       	st	Z, r24
	//Using external 3.3V reference on AREF	
	ADMUX |= (1<<ADLAR);	//Left adjust ADC conversion result, since only ADCH is read because only 8-bit precision is needed	 
     456:	90 81       	ld	r25, Z
     458:	90 62       	ori	r25, 0x20	; 32
     45a:	90 83       	st	Z, r25
	DIDR0 = (1<<channel);	//Disabling unused inputs to save power
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	a9 01       	movw	r20, r18
     462:	02 c0       	rjmp	.+4      	; 0x468 <startADCSampling+0x18>
     464:	44 0f       	add	r20, r20
     466:	55 1f       	adc	r21, r21
     468:	8a 95       	dec	r24
     46a:	e2 f7       	brpl	.-8      	; 0x464 <startADCSampling+0x14>
     46c:	ee e7       	ldi	r30, 0x7E	; 126
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	40 83       	st	Z, r20
	DIDR0 = ~DIDR0;
     472:	80 81       	ld	r24, Z
     474:	80 95       	com	r24
     476:	80 83       	st	Z, r24
	DIDR1 = 0xFF;			//Disable DIDR1
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
	DIDR2 = 0xFF;			//Disable DIDR2
     47e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7c007d>
     482:	08 95       	ret

00000484 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     484:	81 b1       	in	r24, 0x01	; 1
     486:	81 60       	ori	r24, 0x01	; 1
     488:	81 b9       	out	0x01, r24	; 1
     48a:	82 b1       	in	r24, 0x02	; 2
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	82 b9       	out	0x02, r24	; 2
     490:	2f ef       	ldi	r18, 0xFF	; 255
     492:	83 ed       	ldi	r24, 0xD3	; 211
     494:	90 e3       	ldi	r25, 0x30	; 48
     496:	21 50       	subi	r18, 0x01	; 1
     498:	80 40       	sbci	r24, 0x00	; 0
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <I2C_Init+0x12>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <I2C_Init+0x1c>
     4a0:	00 00       	nop
     4a2:	82 e1       	ldi	r24, 0x12	; 18
     4a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     4a8:	e9 eb       	ldi	r30, 0xB9	; 185
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8c 7f       	andi	r24, 0xFC	; 252
     4b0:	80 83       	st	Z, r24
     4b2:	85 e0       	ldi	r24, 0x05	; 5
     4b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4b8:	08 95       	ret

000004ba <I2C_Start>:
     4ba:	94 ea       	ldi	r25, 0xA4	; 164
     4bc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4c0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4c4:	99 23       	and	r25, r25
     4c6:	e4 f7       	brge	.-8      	; 0x4c0 <I2C_Start+0x6>
     4c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     4cc:	98 7f       	andi	r25, 0xF8	; 248
     4ce:	98 30       	cpi	r25, 0x08	; 8
     4d0:	91 f4       	brne	.+36     	; 0x4f6 <I2C_Start+0x3c>
     4d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     4d6:	84 e8       	ldi	r24, 0x84	; 132
     4d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4e0:	88 23       	and	r24, r24
     4e2:	e4 f7       	brge	.-8      	; 0x4dc <I2C_Start+0x22>
     4e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     4e8:	88 7f       	andi	r24, 0xF8	; 248
     4ea:	88 31       	cpi	r24, 0x18	; 24
     4ec:	31 f0       	breq	.+12     	; 0x4fa <I2C_Start+0x40>
     4ee:	80 32       	cpi	r24, 0x20	; 32
     4f0:	31 f4       	brne	.+12     	; 0x4fe <I2C_Start+0x44>
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	08 95       	ret
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	08 95       	ret
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	08 95       	ret
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	08 95       	ret

00000502 <I2C_Write>:
     502:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     506:	84 e8       	ldi	r24, 0x84	; 132
     508:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     50c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     510:	88 23       	and	r24, r24
     512:	e4 f7       	brge	.-8      	; 0x50c <I2C_Write+0xa>
     514:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     518:	88 7f       	andi	r24, 0xF8	; 248
     51a:	88 32       	cpi	r24, 0x28	; 40
     51c:	21 f0       	breq	.+8      	; 0x526 <I2C_Write+0x24>
     51e:	80 33       	cpi	r24, 0x30	; 48
     520:	21 f4       	brne	.+8      	; 0x52a <I2C_Write+0x28>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	08 95       	ret
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	08 95       	ret

0000052e <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     52e:	84 e9       	ldi	r24, 0x94	; 148
     530:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     534:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     538:	84 fd       	sbrc	r24, 4
     53a:	fc cf       	rjmp	.-8      	; 0x534 <I2C_Stop+0x6>
     53c:	08 95       	ret

0000053e <setup>:
	if(DEVEL){
		char temp[100] = {0};
		sprintf(temp,"%u",input);
		sendStrXY(temp, 0,0);
	}
}
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	65 d2       	rcall	.+1226   	; 0xa0e <init_uart_interrupt1>
     544:	4c d2       	rcall	.+1176   	; 0x9de <init_timer1>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	6d df       	rcall	.-294    	; 0x424 <init_adc>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	81 df       	rcall	.-254    	; 0x450 <startADCSampling>
     54e:	78 94       	sei
     550:	88 e7       	ldi	r24, 0x78	; 120
     552:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_i2c_address>
     556:	96 df       	rcall	.-212    	; 0x484 <I2C_Init>
     558:	6d d1       	rcall	.+730    	; 0x834 <InitializeDisplay>
     55a:	00 d2       	rcall	.+1024   	; 0x95c <print_fonts>
     55c:	bd c1       	rjmp	.+890    	; 0x8d8 <clear_display>
     55e:	08 95       	ret

00000560 <transmitUARTPackage>:
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	c0 e0       	ldi	r28, 0x00	; 0
     566:	d0 e0       	ldi	r29, 0x00	; 0
     568:	14 c0       	rjmp	.+40     	; 0x592 <transmitUARTPackage+0x32>
     56a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <uart_user>
     56e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <uart_user+0x1>
     572:	8c e4       	ldi	r24, 0x4C	; 76
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	28 9f       	mul	r18, r24
     578:	f0 01       	movw	r30, r0
     57a:	29 9f       	mul	r18, r25
     57c:	f0 0d       	add	r31, r0
     57e:	38 9f       	mul	r19, r24
     580:	f0 0d       	add	r31, r0
     582:	11 24       	eor	r1, r1
     584:	e6 5f       	subi	r30, 0xF6	; 246
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	ec 0f       	add	r30, r28
     58a:	fd 1f       	adc	r31, r29
     58c:	80 81       	ld	r24, Z
     58e:	51 d2       	rcall	.+1186   	; 0xa32 <putCharUSART>
     590:	21 96       	adiw	r28, 0x01	; 1
     592:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     596:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     59a:	07 96       	adiw	r24, 0x07	; 7
     59c:	c8 17       	cp	r28, r24
     59e:	d9 07       	cpc	r29, r25
     5a0:	20 f3       	brcs	.-56     	; 0x56a <transmitUARTPackage+0xa>
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <debug_print_int>:

void debug_print_int(int input){
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	c4 56       	subi	r28, 0x64	; 100
     5b6:	d1 09       	sbc	r29, r1
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
	if(DEVEL){
		char temp[100] = {0};
     5c2:	8e 01       	movw	r16, r28
     5c4:	0f 5f       	subi	r16, 0xFF	; 255
     5c6:	1f 4f       	sbci	r17, 0xFF	; 255
     5c8:	24 e6       	ldi	r18, 0x64	; 100
     5ca:	f8 01       	movw	r30, r16
     5cc:	11 92       	st	Z+, r1
     5ce:	2a 95       	dec	r18
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <debug_print_int+0x24>
		sprintf(temp,"%u",input);
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	85 e0       	ldi	r24, 0x05	; 5
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	1f 93       	push	r17
     5e0:	0f 93       	push	r16
     5e2:	50 d2       	rcall	.+1184   	; 0xa84 <sprintf>
		sendStrXY(temp, 0,0);
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	c8 01       	movw	r24, r16
     5ee:	88 d1       	rcall	.+784    	; 0x900 <sendStrXY>
	}
}	
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	cc 59       	subi	r28, 0x9C	; 156
     5fe:	df 4f       	sbci	r29, 0xFF	; 255
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <setSampleRate>:
// ================================================


//Calculate and set compare match value for ADC Auto Trigger Source based on target ADC sample rate value.
void setSampleRate(unsigned int sampleRate){
	int compareValue = (F_CPU/(2*sampleRate))/ADC_TRIG_SRC_PS-1;
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	9c 01       	movw	r18, r24
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e9       	ldi	r22, 0x90	; 144
     620:	70 ed       	ldi	r23, 0xD0	; 208
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0c d2       	rcall	.+1048   	; 0xa40 <__udivmodsi4>
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	31 09       	sbc	r19, r1
	OCR1A = compareValue;
     62c:	e8 e8       	ldi	r30, 0x88	; 136
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	31 83       	std	Z+1, r19	; 0x01
     632:	20 83       	st	Z, r18
	OCR1B = compareValue;
     634:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     638:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	debug_print_int(OCR1A);
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	b3 cf       	rjmp	.-154    	; 0x5a8 <debug_print_int>
     642:	08 95       	ret

00000644 <main>:
 
 

	
int main(void){
	sampleBuffer[uart_user][0] = 0x55;
     644:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <uart_user>
     648:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <uart_user+0x1>
     64c:	ac e4       	ldi	r26, 0x4C	; 76
     64e:	b4 e0       	ldi	r27, 0x04	; 4
     650:	8a 9f       	mul	r24, r26
     652:	f0 01       	movw	r30, r0
     654:	8b 9f       	mul	r24, r27
     656:	f0 0d       	add	r31, r0
     658:	9a 9f       	mul	r25, r26
     65a:	f0 0d       	add	r31, r0
     65c:	11 24       	eor	r1, r1
     65e:	e6 5f       	subi	r30, 0xF6	; 246
     660:	fd 4f       	sbci	r31, 0xFD	; 253
     662:	75 e5       	ldi	r23, 0x55	; 85
     664:	70 83       	st	Z, r23
	sampleBuffer[uart_user][1] = 0xAA;
     666:	6a ea       	ldi	r22, 0xAA	; 170
     668:	61 83       	std	Z+1, r22	; 0x01
	sampleBuffer[uart_user][2] = (recordLength+PADDING_SIZE) >> 8;
     66a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     66e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     672:	ac 01       	movw	r20, r24
     674:	49 5f       	subi	r20, 0xF9	; 249
     676:	5f 4f       	sbci	r21, 0xFF	; 255
     678:	52 83       	std	Z+2, r21	; 0x02
	sampleBuffer[uart_user][3] = (recordLength+PADDING_SIZE);
     67a:	37 e0       	ldi	r19, 0x07	; 7
     67c:	38 0f       	add	r19, r24
     67e:	33 83       	std	Z+3, r19	; 0x03
	sampleBuffer[uart_user][4] = 0x02;
     680:	22 e0       	ldi	r18, 0x02	; 2
     682:	24 83       	std	Z+4, r18	; 0x04
	
	sampleBuffer[adc_user][0] = 0x55;
     684:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <__data_end>
     688:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <__data_end+0x1>
     68c:	0a 9f       	mul	r16, r26
     68e:	e0 01       	movw	r28, r0
     690:	0b 9f       	mul	r16, r27
     692:	d0 0d       	add	r29, r0
     694:	1a 9f       	mul	r17, r26
     696:	d0 0d       	add	r29, r0
     698:	11 24       	eor	r1, r1
     69a:	de 01       	movw	r26, r28
     69c:	a6 5f       	subi	r26, 0xF6	; 246
     69e:	bd 4f       	sbci	r27, 0xFD	; 253
     6a0:	7c 93       	st	X, r23
	sampleBuffer[adc_user][1] = 0xAA;
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	6c 93       	st	X, r22
     6a6:	11 97       	sbiw	r26, 0x01	; 1
	sampleBuffer[adc_user][2] = (recordLength+PADDING_SIZE) >> 8;
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	5c 93       	st	X, r21
     6ac:	12 97       	sbiw	r26, 0x02	; 2
	sampleBuffer[adc_user][3] = (recordLength+PADDING_SIZE);
     6ae:	13 96       	adiw	r26, 0x03	; 3
     6b0:	3c 93       	st	X, r19
     6b2:	13 97       	sbiw	r26, 0x03	; 3
	sampleBuffer[adc_user][4] = 0x02;
     6b4:	14 96       	adiw	r26, 0x04	; 4
     6b6:	2c 93       	st	X, r18
     6b8:	14 97       	sbiw	r26, 0x04	; 4

	sampleBuffer[uart_user][HEADER_SIZE+recordLength] = 0x00;//checksum << 8;
     6ba:	9c 01       	movw	r18, r24
     6bc:	2b 5f       	subi	r18, 0xFB	; 251
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
     6c0:	ef 01       	movw	r28, r30
     6c2:	c2 0f       	add	r28, r18
     6c4:	d3 1f       	adc	r29, r19
     6c6:	18 82       	st	Y, r1
	sampleBuffer[uart_user][HEADER_SIZE+recordLength+1] = 0x00; //checksum;
     6c8:	06 96       	adiw	r24, 0x06	; 6
     6ca:	e8 0f       	add	r30, r24
     6cc:	f9 1f       	adc	r31, r25
     6ce:	10 82       	st	Z, r1
	
	sampleBuffer[adc_user][HEADER_SIZE+recordLength] = 0x00;//checksum << 8;
     6d0:	fd 01       	movw	r30, r26
     6d2:	e2 0f       	add	r30, r18
     6d4:	f3 1f       	adc	r31, r19
     6d6:	10 82       	st	Z, r1
	sampleBuffer[adc_user][HEADER_SIZE+recordLength+1] = 0x00; //checksum;
     6d8:	fd 01       	movw	r30, r26
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	10 82       	st	Z, r1
	setup();
     6e0:	2e df       	rcall	.-420    	; 0x53e <setup>
	setSampleRate(9000);
     6e2:	88 e2       	ldi	r24, 0x28	; 40
     6e4:	93 e2       	ldi	r25, 0x23	; 35
     6e6:	96 df       	rcall	.-212    	; 0x614 <setSampleRate>
	
    while (1) {
	
		if(adc_flag){
     6e8:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <adc_flag>
     6ec:	88 23       	and	r24, r24
     6ee:	e1 f3       	breq	.-8      	; 0x6e8 <main+0xa4>
			transmitUARTPackage(&sampleBuffer[uart_user][0], SCOPE_TYPE, recordLength);
     6f0:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <uart_user>
     6f4:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <uart_user+0x1>
     6f8:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     6fc:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     700:	2c e4       	ldi	r18, 0x4C	; 76
     702:	34 e0       	ldi	r19, 0x04	; 4
     704:	62 9f       	mul	r22, r18
     706:	c0 01       	movw	r24, r0
     708:	63 9f       	mul	r22, r19
     70a:	90 0d       	add	r25, r0
     70c:	72 9f       	mul	r23, r18
     70e:	90 0d       	add	r25, r0
     710:	11 24       	eor	r1, r1
     712:	62 e0       	ldi	r22, 0x02	; 2
     714:	86 5f       	subi	r24, 0xF6	; 246
     716:	9d 4f       	sbci	r25, 0xFD	; 253
     718:	23 df       	rcall	.-442    	; 0x560 <transmitUARTPackage>
			adc_flag = 0;
     71a:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <adc_flag>
     71e:	e4 cf       	rjmp	.-56     	; 0x6e8 <main+0xa4>

00000720 <__vector_29>:
// ================================================
// Service Routines
// ================================================

//Service routine for ADC sample ready
ISR(ADC_vect){
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	0b b6       	in	r0, 0x3b	; 59
     72c:	0f 92       	push	r0
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
	sampleBuffer[adc_user][5+bufferCounter1++] = ADCH;
     744:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__data_end>
     748:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__data_end+0x1>
     74c:	80 91 a2 0a 	lds	r24, 0x0AA2	; 0x800aa2 <bufferCounter1>
     750:	90 91 a3 0a 	lds	r25, 0x0AA3	; 0x800aa3 <bufferCounter1+0x1>
     754:	9c 01       	movw	r18, r24
     756:	2f 5f       	subi	r18, 0xFF	; 255
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	30 93 a3 0a 	sts	0x0AA3, r19	; 0x800aa3 <bufferCounter1+0x1>
     75e:	20 93 a2 0a 	sts	0x0AA2, r18	; 0x800aa2 <bufferCounter1>
     762:	05 96       	adiw	r24, 0x05	; 5
     764:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     768:	ac e4       	ldi	r26, 0x4C	; 76
     76a:	b4 e0       	ldi	r27, 0x04	; 4
     76c:	4a 9f       	mul	r20, r26
     76e:	f0 01       	movw	r30, r0
     770:	4b 9f       	mul	r20, r27
     772:	f0 0d       	add	r31, r0
     774:	5a 9f       	mul	r21, r26
     776:	f0 0d       	add	r31, r0
     778:	11 24       	eor	r1, r1
     77a:	e6 5f       	subi	r30, 0xF6	; 246
     77c:	fd 4f       	sbci	r31, 0xFD	; 253
     77e:	e8 0f       	add	r30, r24
     780:	f9 1f       	adc	r31, r25
     782:	60 83       	st	Z, r22
	
	if(bufferCounter1 >= recordLength){
     784:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     788:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     78c:	28 17       	cp	r18, r24
     78e:	39 07       	cpc	r19, r25
     790:	f8 f0       	brcs	.+62     	; 0x7d0 <__vector_29+0xb0>
		adc_flag = 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <adc_flag>
		
		adc_user = !adc_user;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	45 2b       	or	r20, r21
     79e:	11 f0       	breq	.+4      	; 0x7a4 <__vector_29+0x84>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
     7a8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		uart_user = !uart_user;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <uart_user>
     7b4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <uart_user+0x1>
     7b8:	23 2b       	or	r18, r19
     7ba:	11 f0       	breq	.+4      	; 0x7c0 <__vector_29+0xa0>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <uart_user+0x1>
     7c4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <uart_user>
			
		bufferCounter1 = 0;
     7c8:	10 92 a3 0a 	sts	0x0AA3, r1	; 0x800aa3 <bufferCounter1+0x1>
     7cc:	10 92 a2 0a 	sts	0x0AA2, r1	; 0x800aa2 <bufferCounter1>
	
	//Overflow
	//if(bufferCounter[adc_user][0] > SAMPLE_BUF){
		//bufferCounter[adc_user][0] = 0;
	//}
}
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	0f 90       	pop	r0
     7e8:	0b be       	out	0x3b, r0	; 59
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <__vector_18>:

//Service routine for Timer1 Compare B
ISR (TIMER1_COMPB_vect) {
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
}
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <__vector_25>:

//Service routine for UART receive vector
ISR(USART0_RX_vect){
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	11 24       	eor	r1, r1
	//if((UARTBuffer[uart_cnt++] = UDR0) == '\n'){
		//uart_cnt = 0;
		//flag_uart = 1;
	//}
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
     81c:	cf 93       	push	r28
     81e:	c8 2f       	mov	r28, r24
     820:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_i2c_address>
     824:	4a de       	rcall	.-876    	; 0x4ba <I2C_Start>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	6c de       	rcall	.-808    	; 0x502 <I2C_Write>
     82a:	8c 2f       	mov	r24, r28
     82c:	6a de       	rcall	.-812    	; 0x502 <I2C_Write>
     82e:	7f de       	rcall	.-770    	; 0x52e <I2C_Stop>
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <InitializeDisplay>:
     834:	8e ea       	ldi	r24, 0xAE	; 174
     836:	f2 df       	rcall	.-28     	; 0x81c <ssd1306_command>
     838:	85 ed       	ldi	r24, 0xD5	; 213
     83a:	f0 df       	rcall	.-32     	; 0x81c <ssd1306_command>
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	ee df       	rcall	.-36     	; 0x81c <ssd1306_command>
     840:	88 ea       	ldi	r24, 0xA8	; 168
     842:	ec df       	rcall	.-40     	; 0x81c <ssd1306_command>
     844:	8f e3       	ldi	r24, 0x3F	; 63
     846:	ea df       	rcall	.-44     	; 0x81c <ssd1306_command>
     848:	83 ed       	ldi	r24, 0xD3	; 211
     84a:	e8 df       	rcall	.-48     	; 0x81c <ssd1306_command>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	e6 df       	rcall	.-52     	; 0x81c <ssd1306_command>
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	e4 df       	rcall	.-56     	; 0x81c <ssd1306_command>
     854:	8d e8       	ldi	r24, 0x8D	; 141
     856:	e2 df       	rcall	.-60     	; 0x81c <ssd1306_command>
     858:	84 e1       	ldi	r24, 0x14	; 20
     85a:	e0 df       	rcall	.-64     	; 0x81c <ssd1306_command>
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	de df       	rcall	.-68     	; 0x81c <ssd1306_command>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	dc df       	rcall	.-72     	; 0x81c <ssd1306_command>
     864:	81 ea       	ldi	r24, 0xA1	; 161
     866:	da df       	rcall	.-76     	; 0x81c <ssd1306_command>
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	d8 df       	rcall	.-80     	; 0x81c <ssd1306_command>
     86c:	8a ed       	ldi	r24, 0xDA	; 218
     86e:	d6 df       	rcall	.-84     	; 0x81c <ssd1306_command>
     870:	82 e1       	ldi	r24, 0x12	; 18
     872:	d4 df       	rcall	.-88     	; 0x81c <ssd1306_command>
     874:	81 e8       	ldi	r24, 0x81	; 129
     876:	d2 df       	rcall	.-92     	; 0x81c <ssd1306_command>
     878:	8f ec       	ldi	r24, 0xCF	; 207
     87a:	d0 df       	rcall	.-96     	; 0x81c <ssd1306_command>
     87c:	89 ed       	ldi	r24, 0xD9	; 217
     87e:	ce df       	rcall	.-100    	; 0x81c <ssd1306_command>
     880:	81 ef       	ldi	r24, 0xF1	; 241
     882:	cc df       	rcall	.-104    	; 0x81c <ssd1306_command>
     884:	8b ed       	ldi	r24, 0xDB	; 219
     886:	ca df       	rcall	.-108    	; 0x81c <ssd1306_command>
     888:	80 e4       	ldi	r24, 0x40	; 64
     88a:	c8 df       	rcall	.-112    	; 0x81c <ssd1306_command>
     88c:	84 ea       	ldi	r24, 0xA4	; 164
     88e:	c6 df       	rcall	.-116    	; 0x81c <ssd1306_command>
     890:	86 ea       	ldi	r24, 0xA6	; 166
     892:	c4 df       	rcall	.-120    	; 0x81c <ssd1306_command>
     894:	8f ea       	ldi	r24, 0xAF	; 175
     896:	c2 cf       	rjmp	.-124    	; 0x81c <ssd1306_command>
     898:	08 95       	ret

0000089a <SendChar>:
     89a:	cf 93       	push	r28
     89c:	c8 2f       	mov	r28, r24
     89e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_i2c_address>
     8a2:	0b de       	rcall	.-1002   	; 0x4ba <I2C_Start>
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	2d de       	rcall	.-934    	; 0x502 <I2C_Write>
     8a8:	8c 2f       	mov	r24, r28
     8aa:	2b de       	rcall	.-938    	; 0x502 <I2C_Write>
     8ac:	40 de       	rcall	.-896    	; 0x52e <I2C_Stop>
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <setXY>:
     8b2:	cf 93       	push	r28
     8b4:	c6 2f       	mov	r28, r22
     8b6:	80 55       	subi	r24, 0x50	; 80
     8b8:	b1 df       	rcall	.-158    	; 0x81c <ssd1306_command>
     8ba:	8c 2f       	mov	r24, r28
     8bc:	88 0f       	add	r24, r24
     8be:	88 0f       	add	r24, r24
     8c0:	88 0f       	add	r24, r24
     8c2:	88 70       	andi	r24, 0x08	; 8
     8c4:	ab df       	rcall	.-170    	; 0x81c <ssd1306_command>
     8c6:	8c 2f       	mov	r24, r28
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	96 95       	lsr	r25
     8cc:	87 95       	ror	r24
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	80 5f       	subi	r24, 0xF0	; 240
     8d2:	a4 df       	rcall	.-184    	; 0x81c <ssd1306_command>
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <clear_display>:
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	d0 e0       	ldi	r29, 0x00	; 0
     8de:	0b c0       	rjmp	.+22     	; 0x8f6 <clear_display+0x1e>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	8d 2f       	mov	r24, r29
     8e4:	e6 df       	rcall	.-52     	; 0x8b2 <setXY>
     8e6:	c0 e0       	ldi	r28, 0x00	; 0
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <clear_display+0x18>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	d6 df       	rcall	.-84     	; 0x89a <SendChar>
     8ee:	cf 5f       	subi	r28, 0xFF	; 255
     8f0:	cc 23       	and	r28, r28
     8f2:	dc f7       	brge	.-10     	; 0x8ea <clear_display+0x12>
     8f4:	df 5f       	subi	r29, 0xFF	; 255
     8f6:	d8 30       	cpi	r29, 0x08	; 8
     8f8:	98 f3       	brcs	.-26     	; 0x8e0 <clear_display+0x8>
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <sendStrXY>:
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
     90a:	86 2f       	mov	r24, r22
     90c:	06 2f       	mov	r16, r22
     90e:	64 2f       	mov	r22, r20
     910:	d0 df       	rcall	.-96     	; 0x8b2 <setXY>
     912:	1c c0       	rjmp	.+56     	; 0x94c <sendStrXY+0x4c>
     914:	8a 30       	cpi	r24, 0x0A	; 10
     916:	29 f4       	brne	.+10     	; 0x922 <sendStrXY+0x22>
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 0f       	add	r24, r16
     91e:	c9 df       	rcall	.-110    	; 0x8b2 <setXY>
     920:	21 96       	adiw	r28, 0x01	; 1
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	10 c0       	rjmp	.+32     	; 0x946 <sendStrXY+0x46>
     926:	e8 81       	ld	r30, Y
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	b0 97       	sbiw	r30, 0x20	; 32
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ec 51       	subi	r30, 0x1C	; 28
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	e1 0f       	add	r30, r17
     93e:	f1 1d       	adc	r31, r1
     940:	84 91       	lpm	r24, Z
     942:	ab df       	rcall	.-170    	; 0x89a <SendChar>
     944:	1f 5f       	subi	r17, 0xFF	; 255
     946:	18 30       	cpi	r17, 0x08	; 8
     948:	70 f3       	brcs	.-36     	; 0x926 <sendStrXY+0x26>
     94a:	21 96       	adiw	r28, 0x01	; 1
     94c:	88 81       	ld	r24, Y
     94e:	81 11       	cpse	r24, r1
     950:	e1 cf       	rjmp	.-62     	; 0x914 <sendStrXY+0x14>
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <print_fonts>:
void print_fonts(){
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	clear_display();
     96a:	b6 df       	rcall	.-148    	; 0x8d8 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
     96c:	e1 2c       	mov	r14, r1
     96e:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
     970:	68 94       	set
     972:	dd 24       	eor	r13, r13
     974:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
     976:	27 c0       	rjmp	.+78     	; 0x9c6 <print_fonts+0x6a>
		setXY(k,0);
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	8e 2d       	mov	r24, r14
     97c:	9a df       	rcall	.-204    	; 0x8b2 <setXY>

		for (int j=0;j<16;j++)
     97e:	00 e0       	ldi	r16, 0x00	; 0
     980:	10 e0       	ldi	r17, 0x00	; 0
     982:	19 c0       	rjmp	.+50     	; 0x9b6 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
     984:	f8 01       	movw	r30, r16
     986:	ed 0d       	add	r30, r13
     988:	f1 1d       	adc	r31, r1
     98a:	b0 97       	sbiw	r30, 0x20	; 32
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ec 51       	subi	r30, 0x1C	; 28
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	ec 0f       	add	r30, r28
     99e:	fd 1f       	adc	r31, r29
     9a0:	84 91       	lpm	r24, Z
     9a2:	7b df       	rcall	.-266    	; 0x89a <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
     9a4:	21 96       	adiw	r28, 0x01	; 1
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <print_fonts+0x50>
     9a8:	c0 e0       	ldi	r28, 0x00	; 0
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
     9ac:	c8 30       	cpi	r28, 0x08	; 8
     9ae:	d1 05       	cpc	r29, r1
     9b0:	4c f3       	brlt	.-46     	; 0x984 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	00 31       	cpi	r16, 0x10	; 16
     9b8:	11 05       	cpc	r17, r1
     9ba:	b4 f3       	brlt	.-20     	; 0x9a8 <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
     9bc:	80 e1       	ldi	r24, 0x10	; 16
     9be:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	e8 1a       	sub	r14, r24
     9c4:	f8 0a       	sbc	r15, r24
     9c6:	86 e0       	ldi	r24, 0x06	; 6
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	ac f2       	brlt	.-86     	; 0x978 <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	08 95       	ret

000009de <init_timer1>:
#include "Timer.h"


//Initialize hardware 16-bit timer 1
void init_timer1(){
	TCCR1B |= (1<<CS11) | (1<<CS10);	//Prescaler: 64
     9de:	e1 e8       	ldi	r30, 0x81	; 129
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	83 60       	ori	r24, 0x03	; 3
     9e6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);				//Mode: CTC
     9e8:	80 81       	ld	r24, Z
     9ea:	88 60       	ori	r24, 0x08	; 8
     9ec:	80 83       	st	Z, r24
	OCR1A =	12;							//Compare value 16-bit
     9ee:	8c e0       	ldi	r24, 0x0C	; 12
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     9f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B =	12;							//Compare value 16-bit
     9fa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     9fe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	TIMSK1 |= (1<<OCIE1B);				//Interrupt when TCNT1 = OCR3B
     a02:	ef e6       	ldi	r30, 0x6F	; 111
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	84 60       	ori	r24, 0x04	; 4
     a0a:	80 83       	st	Z, r24
     a0c:	08 95       	ret

00000a0e <init_uart_interrupt1>:
//Returns 8-bit from UART receive buffer
char getCharUSART(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
     a0e:	22 e0       	ldi	r18, 0x02	; 2
     a10:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     a14:	e9 ec       	ldi	r30, 0xC9	; 201
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	20 81       	ld	r18, Z
     a1a:	28 69       	ori	r18, 0x98	; 152
     a1c:	20 83       	st	Z, r18
     a1e:	ea ec       	ldi	r30, 0xCA	; 202
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	20 81       	ld	r18, Z
     a24:	26 60       	ori	r18, 0x06	; 6
     a26:	20 83       	st	Z, r18
     a28:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     a2c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     a30:	08 95       	ret

00000a32 <putCharUSART>:

//Transmits 8-bit 
void putCharUSART(char tx){
	
	while(!(UCSR1A & (1<<UDRE1))); //continues when transmit buffer is empty
     a32:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     a36:	95 ff       	sbrs	r25, 5
     a38:	fc cf       	rjmp	.-8      	; 0xa32 <putCharUSART>
	UDR1 = tx;
     a3a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     a3e:	08 95       	ret

00000a40 <__udivmodsi4>:
     a40:	a1 e2       	ldi	r26, 0x21	; 33
     a42:	1a 2e       	mov	r1, r26
     a44:	aa 1b       	sub	r26, r26
     a46:	bb 1b       	sub	r27, r27
     a48:	fd 01       	movw	r30, r26
     a4a:	0d c0       	rjmp	.+26     	; 0xa66 <__udivmodsi4_ep>

00000a4c <__udivmodsi4_loop>:
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	ee 1f       	adc	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	a2 17       	cp	r26, r18
     a56:	b3 07       	cpc	r27, r19
     a58:	e4 07       	cpc	r30, r20
     a5a:	f5 07       	cpc	r31, r21
     a5c:	20 f0       	brcs	.+8      	; 0xa66 <__udivmodsi4_ep>
     a5e:	a2 1b       	sub	r26, r18
     a60:	b3 0b       	sbc	r27, r19
     a62:	e4 0b       	sbc	r30, r20
     a64:	f5 0b       	sbc	r31, r21

00000a66 <__udivmodsi4_ep>:
     a66:	66 1f       	adc	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	88 1f       	adc	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	1a 94       	dec	r1
     a70:	69 f7       	brne	.-38     	; 0xa4c <__udivmodsi4_loop>
     a72:	60 95       	com	r22
     a74:	70 95       	com	r23
     a76:	80 95       	com	r24
     a78:	90 95       	com	r25
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	bd 01       	movw	r22, r26
     a80:	cf 01       	movw	r24, r30
     a82:	08 95       	ret

00000a84 <sprintf>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	2e 97       	sbiw	r28, 0x0e	; 14
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	0e 89       	ldd	r16, Y+22	; 0x16
     a9e:	1f 89       	ldd	r17, Y+23	; 0x17
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	8c 83       	std	Y+4, r24	; 0x04
     aa4:	1a 83       	std	Y+2, r17	; 0x02
     aa6:	09 83       	std	Y+1, r16	; 0x01
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	9f e7       	ldi	r25, 0x7F	; 127
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	ae 01       	movw	r20, r28
     ab2:	46 5e       	subi	r20, 0xE6	; 230
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	68 8d       	ldd	r22, Y+24	; 0x18
     ab8:	79 8d       	ldd	r23, Y+25	; 0x19
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	10 d0       	rcall	.+32     	; 0xae0 <vfprintf>
     ac0:	ef 81       	ldd	r30, Y+7	; 0x07
     ac2:	f8 85       	ldd	r31, Y+8	; 0x08
     ac4:	e0 0f       	add	r30, r16
     ac6:	f1 1f       	adc	r31, r17
     ac8:	10 82       	st	Z, r1
     aca:	2e 96       	adiw	r28, 0x0e	; 14
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <vfprintf>:
     ae0:	2f 92       	push	r2
     ae2:	3f 92       	push	r3
     ae4:	4f 92       	push	r4
     ae6:	5f 92       	push	r5
     ae8:	6f 92       	push	r6
     aea:	7f 92       	push	r7
     aec:	8f 92       	push	r8
     aee:	9f 92       	push	r9
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	2b 97       	sbiw	r28, 0x0b	; 11
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	6c 01       	movw	r12, r24
     b16:	7b 01       	movw	r14, r22
     b18:	8a 01       	movw	r16, r20
     b1a:	fc 01       	movw	r30, r24
     b1c:	17 82       	std	Z+7, r1	; 0x07
     b1e:	16 82       	std	Z+6, r1	; 0x06
     b20:	83 81       	ldd	r24, Z+3	; 0x03
     b22:	81 ff       	sbrs	r24, 1
     b24:	bf c1       	rjmp	.+894    	; 0xea4 <vfprintf+0x3c4>
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	3c 01       	movw	r6, r24
     b2c:	f6 01       	movw	r30, r12
     b2e:	93 81       	ldd	r25, Z+3	; 0x03
     b30:	f7 01       	movw	r30, r14
     b32:	93 fd       	sbrc	r25, 3
     b34:	85 91       	lpm	r24, Z+
     b36:	93 ff       	sbrs	r25, 3
     b38:	81 91       	ld	r24, Z+
     b3a:	7f 01       	movw	r14, r30
     b3c:	88 23       	and	r24, r24
     b3e:	09 f4       	brne	.+2      	; 0xb42 <vfprintf+0x62>
     b40:	ad c1       	rjmp	.+858    	; 0xe9c <vfprintf+0x3bc>
     b42:	85 32       	cpi	r24, 0x25	; 37
     b44:	39 f4       	brne	.+14     	; 0xb54 <vfprintf+0x74>
     b46:	93 fd       	sbrc	r25, 3
     b48:	85 91       	lpm	r24, Z+
     b4a:	93 ff       	sbrs	r25, 3
     b4c:	81 91       	ld	r24, Z+
     b4e:	7f 01       	movw	r14, r30
     b50:	85 32       	cpi	r24, 0x25	; 37
     b52:	21 f4       	brne	.+8      	; 0xb5c <vfprintf+0x7c>
     b54:	b6 01       	movw	r22, r12
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	d6 d1       	rcall	.+940    	; 0xf06 <fputc>
     b5a:	e8 cf       	rjmp	.-48     	; 0xb2c <vfprintf+0x4c>
     b5c:	91 2c       	mov	r9, r1
     b5e:	21 2c       	mov	r2, r1
     b60:	31 2c       	mov	r3, r1
     b62:	ff e1       	ldi	r31, 0x1F	; 31
     b64:	f3 15       	cp	r31, r3
     b66:	d8 f0       	brcs	.+54     	; 0xb9e <vfprintf+0xbe>
     b68:	8b 32       	cpi	r24, 0x2B	; 43
     b6a:	79 f0       	breq	.+30     	; 0xb8a <vfprintf+0xaa>
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <vfprintf+0x9c>
     b6e:	80 32       	cpi	r24, 0x20	; 32
     b70:	79 f0       	breq	.+30     	; 0xb90 <vfprintf+0xb0>
     b72:	83 32       	cpi	r24, 0x23	; 35
     b74:	a1 f4       	brne	.+40     	; 0xb9e <vfprintf+0xbe>
     b76:	23 2d       	mov	r18, r3
     b78:	20 61       	ori	r18, 0x10	; 16
     b7a:	1d c0       	rjmp	.+58     	; 0xbb6 <vfprintf+0xd6>
     b7c:	8d 32       	cpi	r24, 0x2D	; 45
     b7e:	61 f0       	breq	.+24     	; 0xb98 <vfprintf+0xb8>
     b80:	80 33       	cpi	r24, 0x30	; 48
     b82:	69 f4       	brne	.+26     	; 0xb9e <vfprintf+0xbe>
     b84:	23 2d       	mov	r18, r3
     b86:	21 60       	ori	r18, 0x01	; 1
     b88:	16 c0       	rjmp	.+44     	; 0xbb6 <vfprintf+0xd6>
     b8a:	83 2d       	mov	r24, r3
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	38 2e       	mov	r3, r24
     b90:	e3 2d       	mov	r30, r3
     b92:	e4 60       	ori	r30, 0x04	; 4
     b94:	3e 2e       	mov	r3, r30
     b96:	2a c0       	rjmp	.+84     	; 0xbec <vfprintf+0x10c>
     b98:	f3 2d       	mov	r31, r3
     b9a:	f8 60       	ori	r31, 0x08	; 8
     b9c:	1d c0       	rjmp	.+58     	; 0xbd8 <vfprintf+0xf8>
     b9e:	37 fc       	sbrc	r3, 7
     ba0:	2d c0       	rjmp	.+90     	; 0xbfc <vfprintf+0x11c>
     ba2:	20 ed       	ldi	r18, 0xD0	; 208
     ba4:	28 0f       	add	r18, r24
     ba6:	2a 30       	cpi	r18, 0x0A	; 10
     ba8:	40 f0       	brcs	.+16     	; 0xbba <vfprintf+0xda>
     baa:	8e 32       	cpi	r24, 0x2E	; 46
     bac:	b9 f4       	brne	.+46     	; 0xbdc <vfprintf+0xfc>
     bae:	36 fc       	sbrc	r3, 6
     bb0:	75 c1       	rjmp	.+746    	; 0xe9c <vfprintf+0x3bc>
     bb2:	23 2d       	mov	r18, r3
     bb4:	20 64       	ori	r18, 0x40	; 64
     bb6:	32 2e       	mov	r3, r18
     bb8:	19 c0       	rjmp	.+50     	; 0xbec <vfprintf+0x10c>
     bba:	36 fe       	sbrs	r3, 6
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <vfprintf+0xea>
     bbe:	8a e0       	ldi	r24, 0x0A	; 10
     bc0:	98 9e       	mul	r9, r24
     bc2:	20 0d       	add	r18, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	92 2e       	mov	r9, r18
     bc8:	11 c0       	rjmp	.+34     	; 0xbec <vfprintf+0x10c>
     bca:	ea e0       	ldi	r30, 0x0A	; 10
     bcc:	2e 9e       	mul	r2, r30
     bce:	20 0d       	add	r18, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	22 2e       	mov	r2, r18
     bd4:	f3 2d       	mov	r31, r3
     bd6:	f0 62       	ori	r31, 0x20	; 32
     bd8:	3f 2e       	mov	r3, r31
     bda:	08 c0       	rjmp	.+16     	; 0xbec <vfprintf+0x10c>
     bdc:	8c 36       	cpi	r24, 0x6C	; 108
     bde:	21 f4       	brne	.+8      	; 0xbe8 <vfprintf+0x108>
     be0:	83 2d       	mov	r24, r3
     be2:	80 68       	ori	r24, 0x80	; 128
     be4:	38 2e       	mov	r3, r24
     be6:	02 c0       	rjmp	.+4      	; 0xbec <vfprintf+0x10c>
     be8:	88 36       	cpi	r24, 0x68	; 104
     bea:	41 f4       	brne	.+16     	; 0xbfc <vfprintf+0x11c>
     bec:	f7 01       	movw	r30, r14
     bee:	93 fd       	sbrc	r25, 3
     bf0:	85 91       	lpm	r24, Z+
     bf2:	93 ff       	sbrs	r25, 3
     bf4:	81 91       	ld	r24, Z+
     bf6:	7f 01       	movw	r14, r30
     bf8:	81 11       	cpse	r24, r1
     bfa:	b3 cf       	rjmp	.-154    	; 0xb62 <vfprintf+0x82>
     bfc:	98 2f       	mov	r25, r24
     bfe:	9f 7d       	andi	r25, 0xDF	; 223
     c00:	95 54       	subi	r25, 0x45	; 69
     c02:	93 30       	cpi	r25, 0x03	; 3
     c04:	28 f4       	brcc	.+10     	; 0xc10 <vfprintf+0x130>
     c06:	0c 5f       	subi	r16, 0xFC	; 252
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	9f e3       	ldi	r25, 0x3F	; 63
     c0c:	99 83       	std	Y+1, r25	; 0x01
     c0e:	0d c0       	rjmp	.+26     	; 0xc2a <vfprintf+0x14a>
     c10:	83 36       	cpi	r24, 0x63	; 99
     c12:	31 f0       	breq	.+12     	; 0xc20 <vfprintf+0x140>
     c14:	83 37       	cpi	r24, 0x73	; 115
     c16:	71 f0       	breq	.+28     	; 0xc34 <vfprintf+0x154>
     c18:	83 35       	cpi	r24, 0x53	; 83
     c1a:	09 f0       	breq	.+2      	; 0xc1e <vfprintf+0x13e>
     c1c:	55 c0       	rjmp	.+170    	; 0xcc8 <vfprintf+0x1e8>
     c1e:	20 c0       	rjmp	.+64     	; 0xc60 <vfprintf+0x180>
     c20:	f8 01       	movw	r30, r16
     c22:	80 81       	ld	r24, Z
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	0e 5f       	subi	r16, 0xFE	; 254
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	88 24       	eor	r8, r8
     c2c:	83 94       	inc	r8
     c2e:	91 2c       	mov	r9, r1
     c30:	53 01       	movw	r10, r6
     c32:	12 c0       	rjmp	.+36     	; 0xc58 <vfprintf+0x178>
     c34:	28 01       	movw	r4, r16
     c36:	f2 e0       	ldi	r31, 0x02	; 2
     c38:	4f 0e       	add	r4, r31
     c3a:	51 1c       	adc	r5, r1
     c3c:	f8 01       	movw	r30, r16
     c3e:	a0 80       	ld	r10, Z
     c40:	b1 80       	ldd	r11, Z+1	; 0x01
     c42:	36 fe       	sbrs	r3, 6
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <vfprintf+0x16c>
     c46:	69 2d       	mov	r22, r9
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0x170>
     c4c:	6f ef       	ldi	r22, 0xFF	; 255
     c4e:	7f ef       	ldi	r23, 0xFF	; 255
     c50:	c5 01       	movw	r24, r10
     c52:	4e d1       	rcall	.+668    	; 0xef0 <strnlen>
     c54:	4c 01       	movw	r8, r24
     c56:	82 01       	movw	r16, r4
     c58:	f3 2d       	mov	r31, r3
     c5a:	ff 77       	andi	r31, 0x7F	; 127
     c5c:	3f 2e       	mov	r3, r31
     c5e:	15 c0       	rjmp	.+42     	; 0xc8a <vfprintf+0x1aa>
     c60:	28 01       	movw	r4, r16
     c62:	22 e0       	ldi	r18, 0x02	; 2
     c64:	42 0e       	add	r4, r18
     c66:	51 1c       	adc	r5, r1
     c68:	f8 01       	movw	r30, r16
     c6a:	a0 80       	ld	r10, Z
     c6c:	b1 80       	ldd	r11, Z+1	; 0x01
     c6e:	36 fe       	sbrs	r3, 6
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <vfprintf+0x198>
     c72:	69 2d       	mov	r22, r9
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <vfprintf+0x19c>
     c78:	6f ef       	ldi	r22, 0xFF	; 255
     c7a:	7f ef       	ldi	r23, 0xFF	; 255
     c7c:	c5 01       	movw	r24, r10
     c7e:	2d d1       	rcall	.+602    	; 0xeda <strnlen_P>
     c80:	4c 01       	movw	r8, r24
     c82:	f3 2d       	mov	r31, r3
     c84:	f0 68       	ori	r31, 0x80	; 128
     c86:	3f 2e       	mov	r3, r31
     c88:	82 01       	movw	r16, r4
     c8a:	33 fc       	sbrc	r3, 3
     c8c:	19 c0       	rjmp	.+50     	; 0xcc0 <vfprintf+0x1e0>
     c8e:	82 2d       	mov	r24, r2
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	88 16       	cp	r8, r24
     c94:	99 06       	cpc	r9, r25
     c96:	a0 f4       	brcc	.+40     	; 0xcc0 <vfprintf+0x1e0>
     c98:	b6 01       	movw	r22, r12
     c9a:	80 e2       	ldi	r24, 0x20	; 32
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	33 d1       	rcall	.+614    	; 0xf06 <fputc>
     ca0:	2a 94       	dec	r2
     ca2:	f5 cf       	rjmp	.-22     	; 0xc8e <vfprintf+0x1ae>
     ca4:	f5 01       	movw	r30, r10
     ca6:	37 fc       	sbrc	r3, 7
     ca8:	85 91       	lpm	r24, Z+
     caa:	37 fe       	sbrs	r3, 7
     cac:	81 91       	ld	r24, Z+
     cae:	5f 01       	movw	r10, r30
     cb0:	b6 01       	movw	r22, r12
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	28 d1       	rcall	.+592    	; 0xf06 <fputc>
     cb6:	21 10       	cpse	r2, r1
     cb8:	2a 94       	dec	r2
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	82 1a       	sub	r8, r18
     cbe:	91 08       	sbc	r9, r1
     cc0:	81 14       	cp	r8, r1
     cc2:	91 04       	cpc	r9, r1
     cc4:	79 f7       	brne	.-34     	; 0xca4 <vfprintf+0x1c4>
     cc6:	e1 c0       	rjmp	.+450    	; 0xe8a <vfprintf+0x3aa>
     cc8:	84 36       	cpi	r24, 0x64	; 100
     cca:	11 f0       	breq	.+4      	; 0xcd0 <vfprintf+0x1f0>
     ccc:	89 36       	cpi	r24, 0x69	; 105
     cce:	39 f5       	brne	.+78     	; 0xd1e <vfprintf+0x23e>
     cd0:	f8 01       	movw	r30, r16
     cd2:	37 fe       	sbrs	r3, 7
     cd4:	07 c0       	rjmp	.+14     	; 0xce4 <vfprintf+0x204>
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	0c 5f       	subi	r16, 0xFC	; 252
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <vfprintf+0x214>
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	07 2e       	mov	r0, r23
     cea:	00 0c       	add	r0, r0
     cec:	88 0b       	sbc	r24, r24
     cee:	99 0b       	sbc	r25, r25
     cf0:	0e 5f       	subi	r16, 0xFE	; 254
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	f3 2d       	mov	r31, r3
     cf6:	ff 76       	andi	r31, 0x6F	; 111
     cf8:	3f 2e       	mov	r3, r31
     cfa:	97 ff       	sbrs	r25, 7
     cfc:	09 c0       	rjmp	.+18     	; 0xd10 <vfprintf+0x230>
     cfe:	90 95       	com	r25
     d00:	80 95       	com	r24
     d02:	70 95       	com	r23
     d04:	61 95       	neg	r22
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	8f 4f       	sbci	r24, 0xFF	; 255
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	f0 68       	ori	r31, 0x80	; 128
     d0e:	3f 2e       	mov	r3, r31
     d10:	2a e0       	ldi	r18, 0x0A	; 10
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a3 01       	movw	r20, r6
     d16:	33 d1       	rcall	.+614    	; 0xf7e <__ultoa_invert>
     d18:	88 2e       	mov	r8, r24
     d1a:	86 18       	sub	r8, r6
     d1c:	44 c0       	rjmp	.+136    	; 0xda6 <vfprintf+0x2c6>
     d1e:	85 37       	cpi	r24, 0x75	; 117
     d20:	31 f4       	brne	.+12     	; 0xd2e <vfprintf+0x24e>
     d22:	23 2d       	mov	r18, r3
     d24:	2f 7e       	andi	r18, 0xEF	; 239
     d26:	b2 2e       	mov	r11, r18
     d28:	2a e0       	ldi	r18, 0x0A	; 10
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	25 c0       	rjmp	.+74     	; 0xd78 <vfprintf+0x298>
     d2e:	93 2d       	mov	r25, r3
     d30:	99 7f       	andi	r25, 0xF9	; 249
     d32:	b9 2e       	mov	r11, r25
     d34:	8f 36       	cpi	r24, 0x6F	; 111
     d36:	c1 f0       	breq	.+48     	; 0xd68 <vfprintf+0x288>
     d38:	18 f4       	brcc	.+6      	; 0xd40 <vfprintf+0x260>
     d3a:	88 35       	cpi	r24, 0x58	; 88
     d3c:	79 f0       	breq	.+30     	; 0xd5c <vfprintf+0x27c>
     d3e:	ae c0       	rjmp	.+348    	; 0xe9c <vfprintf+0x3bc>
     d40:	80 37       	cpi	r24, 0x70	; 112
     d42:	19 f0       	breq	.+6      	; 0xd4a <vfprintf+0x26a>
     d44:	88 37       	cpi	r24, 0x78	; 120
     d46:	21 f0       	breq	.+8      	; 0xd50 <vfprintf+0x270>
     d48:	a9 c0       	rjmp	.+338    	; 0xe9c <vfprintf+0x3bc>
     d4a:	e9 2f       	mov	r30, r25
     d4c:	e0 61       	ori	r30, 0x10	; 16
     d4e:	be 2e       	mov	r11, r30
     d50:	b4 fe       	sbrs	r11, 4
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <vfprintf+0x28e>
     d54:	fb 2d       	mov	r31, r11
     d56:	f4 60       	ori	r31, 0x04	; 4
     d58:	bf 2e       	mov	r11, r31
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <vfprintf+0x28e>
     d5c:	34 fe       	sbrs	r3, 4
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <vfprintf+0x294>
     d60:	29 2f       	mov	r18, r25
     d62:	26 60       	ori	r18, 0x06	; 6
     d64:	b2 2e       	mov	r11, r18
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <vfprintf+0x294>
     d68:	28 e0       	ldi	r18, 0x08	; 8
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <vfprintf+0x298>
     d6e:	20 e1       	ldi	r18, 0x10	; 16
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x298>
     d74:	20 e1       	ldi	r18, 0x10	; 16
     d76:	32 e0       	ldi	r19, 0x02	; 2
     d78:	f8 01       	movw	r30, r16
     d7a:	b7 fe       	sbrs	r11, 7
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <vfprintf+0x2ac>
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	0c 5f       	subi	r16, 0xFC	; 252
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <vfprintf+0x2b8>
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 5f       	subi	r16, 0xFE	; 254
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	a3 01       	movw	r20, r6
     d9a:	f1 d0       	rcall	.+482    	; 0xf7e <__ultoa_invert>
     d9c:	88 2e       	mov	r8, r24
     d9e:	86 18       	sub	r8, r6
     da0:	fb 2d       	mov	r31, r11
     da2:	ff 77       	andi	r31, 0x7F	; 127
     da4:	3f 2e       	mov	r3, r31
     da6:	36 fe       	sbrs	r3, 6
     da8:	0d c0       	rjmp	.+26     	; 0xdc4 <vfprintf+0x2e4>
     daa:	23 2d       	mov	r18, r3
     dac:	2e 7f       	andi	r18, 0xFE	; 254
     dae:	a2 2e       	mov	r10, r18
     db0:	89 14       	cp	r8, r9
     db2:	58 f4       	brcc	.+22     	; 0xdca <vfprintf+0x2ea>
     db4:	34 fe       	sbrs	r3, 4
     db6:	0b c0       	rjmp	.+22     	; 0xdce <vfprintf+0x2ee>
     db8:	32 fc       	sbrc	r3, 2
     dba:	09 c0       	rjmp	.+18     	; 0xdce <vfprintf+0x2ee>
     dbc:	83 2d       	mov	r24, r3
     dbe:	8e 7e       	andi	r24, 0xEE	; 238
     dc0:	a8 2e       	mov	r10, r24
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <vfprintf+0x2ee>
     dc4:	b8 2c       	mov	r11, r8
     dc6:	a3 2c       	mov	r10, r3
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <vfprintf+0x2f0>
     dca:	b8 2c       	mov	r11, r8
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <vfprintf+0x2f0>
     dce:	b9 2c       	mov	r11, r9
     dd0:	a4 fe       	sbrs	r10, 4
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <vfprintf+0x312>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e8 0d       	add	r30, r8
     dd8:	f1 1d       	adc	r31, r1
     dda:	80 81       	ld	r24, Z
     ddc:	80 33       	cpi	r24, 0x30	; 48
     dde:	21 f4       	brne	.+8      	; 0xde8 <vfprintf+0x308>
     de0:	9a 2d       	mov	r25, r10
     de2:	99 7e       	andi	r25, 0xE9	; 233
     de4:	a9 2e       	mov	r10, r25
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <vfprintf+0x31a>
     de8:	a2 fe       	sbrs	r10, 2
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <vfprintf+0x318>
     dec:	b3 94       	inc	r11
     dee:	b3 94       	inc	r11
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <vfprintf+0x31a>
     df2:	8a 2d       	mov	r24, r10
     df4:	86 78       	andi	r24, 0x86	; 134
     df6:	09 f0       	breq	.+2      	; 0xdfa <vfprintf+0x31a>
     df8:	b3 94       	inc	r11
     dfa:	a3 fc       	sbrc	r10, 3
     dfc:	10 c0       	rjmp	.+32     	; 0xe1e <vfprintf+0x33e>
     dfe:	a0 fe       	sbrs	r10, 0
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <vfprintf+0x32e>
     e02:	b2 14       	cp	r11, r2
     e04:	80 f4       	brcc	.+32     	; 0xe26 <vfprintf+0x346>
     e06:	28 0c       	add	r2, r8
     e08:	92 2c       	mov	r9, r2
     e0a:	9b 18       	sub	r9, r11
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <vfprintf+0x348>
     e0e:	b2 14       	cp	r11, r2
     e10:	58 f4       	brcc	.+22     	; 0xe28 <vfprintf+0x348>
     e12:	b6 01       	movw	r22, r12
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	76 d0       	rcall	.+236    	; 0xf06 <fputc>
     e1a:	b3 94       	inc	r11
     e1c:	f8 cf       	rjmp	.-16     	; 0xe0e <vfprintf+0x32e>
     e1e:	b2 14       	cp	r11, r2
     e20:	18 f4       	brcc	.+6      	; 0xe28 <vfprintf+0x348>
     e22:	2b 18       	sub	r2, r11
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <vfprintf+0x34a>
     e26:	98 2c       	mov	r9, r8
     e28:	21 2c       	mov	r2, r1
     e2a:	a4 fe       	sbrs	r10, 4
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <vfprintf+0x36c>
     e2e:	b6 01       	movw	r22, r12
     e30:	80 e3       	ldi	r24, 0x30	; 48
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	68 d0       	rcall	.+208    	; 0xf06 <fputc>
     e36:	a2 fe       	sbrs	r10, 2
     e38:	16 c0       	rjmp	.+44     	; 0xe66 <vfprintf+0x386>
     e3a:	a1 fc       	sbrc	r10, 1
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x364>
     e3e:	88 e7       	ldi	r24, 0x78	; 120
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x368>
     e44:	88 e5       	ldi	r24, 0x58	; 88
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	b6 01       	movw	r22, r12
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <vfprintf+0x384>
     e4c:	8a 2d       	mov	r24, r10
     e4e:	86 78       	andi	r24, 0x86	; 134
     e50:	51 f0       	breq	.+20     	; 0xe66 <vfprintf+0x386>
     e52:	a1 fe       	sbrs	r10, 1
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x37a>
     e56:	8b e2       	ldi	r24, 0x2B	; 43
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <vfprintf+0x37c>
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	a7 fc       	sbrc	r10, 7
     e5e:	8d e2       	ldi	r24, 0x2D	; 45
     e60:	b6 01       	movw	r22, r12
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	50 d0       	rcall	.+160    	; 0xf06 <fputc>
     e66:	89 14       	cp	r8, r9
     e68:	30 f4       	brcc	.+12     	; 0xe76 <vfprintf+0x396>
     e6a:	b6 01       	movw	r22, r12
     e6c:	80 e3       	ldi	r24, 0x30	; 48
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	4a d0       	rcall	.+148    	; 0xf06 <fputc>
     e72:	9a 94       	dec	r9
     e74:	f8 cf       	rjmp	.-16     	; 0xe66 <vfprintf+0x386>
     e76:	8a 94       	dec	r8
     e78:	f3 01       	movw	r30, r6
     e7a:	e8 0d       	add	r30, r8
     e7c:	f1 1d       	adc	r31, r1
     e7e:	80 81       	ld	r24, Z
     e80:	b6 01       	movw	r22, r12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	40 d0       	rcall	.+128    	; 0xf06 <fputc>
     e86:	81 10       	cpse	r8, r1
     e88:	f6 cf       	rjmp	.-20     	; 0xe76 <vfprintf+0x396>
     e8a:	22 20       	and	r2, r2
     e8c:	09 f4       	brne	.+2      	; 0xe90 <vfprintf+0x3b0>
     e8e:	4e ce       	rjmp	.-868    	; 0xb2c <vfprintf+0x4c>
     e90:	b6 01       	movw	r22, r12
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	37 d0       	rcall	.+110    	; 0xf06 <fputc>
     e98:	2a 94       	dec	r2
     e9a:	f7 cf       	rjmp	.-18     	; 0xe8a <vfprintf+0x3aa>
     e9c:	f6 01       	movw	r30, r12
     e9e:	86 81       	ldd	r24, Z+6	; 0x06
     ea0:	97 81       	ldd	r25, Z+7	; 0x07
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0x3c8>
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	9f ef       	ldi	r25, 0xFF	; 255
     ea8:	2b 96       	adiw	r28, 0x0b	; 11
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	8f 90       	pop	r8
     ecc:	7f 90       	pop	r7
     ece:	6f 90       	pop	r6
     ed0:	5f 90       	pop	r5
     ed2:	4f 90       	pop	r4
     ed4:	3f 90       	pop	r3
     ed6:	2f 90       	pop	r2
     ed8:	08 95       	ret

00000eda <strnlen_P>:
     eda:	fc 01       	movw	r30, r24
     edc:	05 90       	lpm	r0, Z+
     ede:	61 50       	subi	r22, 0x01	; 1
     ee0:	70 40       	sbci	r23, 0x00	; 0
     ee2:	01 10       	cpse	r0, r1
     ee4:	d8 f7       	brcc	.-10     	; 0xedc <strnlen_P+0x2>
     ee6:	80 95       	com	r24
     ee8:	90 95       	com	r25
     eea:	8e 0f       	add	r24, r30
     eec:	9f 1f       	adc	r25, r31
     eee:	08 95       	ret

00000ef0 <strnlen>:
     ef0:	fc 01       	movw	r30, r24
     ef2:	61 50       	subi	r22, 0x01	; 1
     ef4:	70 40       	sbci	r23, 0x00	; 0
     ef6:	01 90       	ld	r0, Z+
     ef8:	01 10       	cpse	r0, r1
     efa:	d8 f7       	brcc	.-10     	; 0xef2 <strnlen+0x2>
     efc:	80 95       	com	r24
     efe:	90 95       	com	r25
     f00:	8e 0f       	add	r24, r30
     f02:	9f 1f       	adc	r25, r31
     f04:	08 95       	ret

00000f06 <fputc>:
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	fb 01       	movw	r30, r22
     f10:	23 81       	ldd	r18, Z+3	; 0x03
     f12:	21 fd       	sbrc	r18, 1
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <fputc+0x16>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	2c c0       	rjmp	.+88     	; 0xf74 <fputc+0x6e>
     f1c:	22 ff       	sbrs	r18, 2
     f1e:	16 c0       	rjmp	.+44     	; 0xf4c <fputc+0x46>
     f20:	46 81       	ldd	r20, Z+6	; 0x06
     f22:	57 81       	ldd	r21, Z+7	; 0x07
     f24:	24 81       	ldd	r18, Z+4	; 0x04
     f26:	35 81       	ldd	r19, Z+5	; 0x05
     f28:	42 17       	cp	r20, r18
     f2a:	53 07       	cpc	r21, r19
     f2c:	44 f4       	brge	.+16     	; 0xf3e <fputc+0x38>
     f2e:	a0 81       	ld	r26, Z
     f30:	b1 81       	ldd	r27, Z+1	; 0x01
     f32:	9d 01       	movw	r18, r26
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	31 83       	std	Z+1, r19	; 0x01
     f3a:	20 83       	st	Z, r18
     f3c:	8c 93       	st	X, r24
     f3e:	26 81       	ldd	r18, Z+6	; 0x06
     f40:	37 81       	ldd	r19, Z+7	; 0x07
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	37 83       	std	Z+7, r19	; 0x07
     f48:	26 83       	std	Z+6, r18	; 0x06
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <fputc+0x6e>
     f4c:	8b 01       	movw	r16, r22
     f4e:	ec 01       	movw	r28, r24
     f50:	fb 01       	movw	r30, r22
     f52:	00 84       	ldd	r0, Z+8	; 0x08
     f54:	f1 85       	ldd	r31, Z+9	; 0x09
     f56:	e0 2d       	mov	r30, r0
     f58:	19 95       	eicall
     f5a:	89 2b       	or	r24, r25
     f5c:	e1 f6       	brne	.-72     	; 0xf16 <fputc+0x10>
     f5e:	d8 01       	movw	r26, r16
     f60:	16 96       	adiw	r26, 0x06	; 6
     f62:	8d 91       	ld	r24, X+
     f64:	9c 91       	ld	r25, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	17 96       	adiw	r26, 0x07	; 7
     f6c:	9c 93       	st	X, r25
     f6e:	8e 93       	st	-X, r24
     f70:	16 97       	sbiw	r26, 0x06	; 6
     f72:	ce 01       	movw	r24, r28
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <__ultoa_invert>:
     f7e:	fa 01       	movw	r30, r20
     f80:	aa 27       	eor	r26, r26
     f82:	28 30       	cpi	r18, 0x08	; 8
     f84:	51 f1       	breq	.+84     	; 0xfda <__ultoa_invert+0x5c>
     f86:	20 31       	cpi	r18, 0x10	; 16
     f88:	81 f1       	breq	.+96     	; 0xfea <__ultoa_invert+0x6c>
     f8a:	e8 94       	clt
     f8c:	6f 93       	push	r22
     f8e:	6e 7f       	andi	r22, 0xFE	; 254
     f90:	6e 5f       	subi	r22, 0xFE	; 254
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	af 4f       	sbci	r26, 0xFF	; 255
     f9a:	b1 e0       	ldi	r27, 0x01	; 1
     f9c:	3e d0       	rcall	.+124    	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
     f9e:	b4 e0       	ldi	r27, 0x04	; 4
     fa0:	3c d0       	rcall	.+120    	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
     fa2:	67 0f       	add	r22, r23
     fa4:	78 1f       	adc	r23, r24
     fa6:	89 1f       	adc	r24, r25
     fa8:	9a 1f       	adc	r25, r26
     faa:	a1 1d       	adc	r26, r1
     fac:	68 0f       	add	r22, r24
     fae:	79 1f       	adc	r23, r25
     fb0:	8a 1f       	adc	r24, r26
     fb2:	91 1d       	adc	r25, r1
     fb4:	a1 1d       	adc	r26, r1
     fb6:	6a 0f       	add	r22, r26
     fb8:	71 1d       	adc	r23, r1
     fba:	81 1d       	adc	r24, r1
     fbc:	91 1d       	adc	r25, r1
     fbe:	a1 1d       	adc	r26, r1
     fc0:	20 d0       	rcall	.+64     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <__ultoa_invert+0x48>
     fc4:	68 94       	set
     fc6:	3f 91       	pop	r19
     fc8:	2a e0       	ldi	r18, 0x0A	; 10
     fca:	26 9f       	mul	r18, r22
     fcc:	11 24       	eor	r1, r1
     fce:	30 19       	sub	r19, r0
     fd0:	30 5d       	subi	r19, 0xD0	; 208
     fd2:	31 93       	st	Z+, r19
     fd4:	de f6       	brtc	.-74     	; 0xf8c <__ultoa_invert+0xe>
     fd6:	cf 01       	movw	r24, r30
     fd8:	08 95       	ret
     fda:	46 2f       	mov	r20, r22
     fdc:	47 70       	andi	r20, 0x07	; 7
     fde:	40 5d       	subi	r20, 0xD0	; 208
     fe0:	41 93       	st	Z+, r20
     fe2:	b3 e0       	ldi	r27, 0x03	; 3
     fe4:	0f d0       	rcall	.+30     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__ultoa_invert+0x5c>
     fe8:	f6 cf       	rjmp	.-20     	; 0xfd6 <__ultoa_invert+0x58>
     fea:	46 2f       	mov	r20, r22
     fec:	4f 70       	andi	r20, 0x0F	; 15
     fee:	40 5d       	subi	r20, 0xD0	; 208
     ff0:	4a 33       	cpi	r20, 0x3A	; 58
     ff2:	18 f0       	brcs	.+6      	; 0xffa <__ultoa_invert+0x7c>
     ff4:	49 5d       	subi	r20, 0xD9	; 217
     ff6:	31 fd       	sbrc	r19, 1
     ff8:	40 52       	subi	r20, 0x20	; 32
     ffa:	41 93       	st	Z+, r20
     ffc:	02 d0       	rcall	.+4      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ffe:	a9 f7       	brne	.-22     	; 0xfea <__ultoa_invert+0x6c>
    1000:	ea cf       	rjmp	.-44     	; 0xfd6 <__ultoa_invert+0x58>
    1002:	b4 e0       	ldi	r27, 0x04	; 4
    1004:	a6 95       	lsr	r26
    1006:	97 95       	ror	r25
    1008:	87 95       	ror	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	ba 95       	dec	r27
    1010:	c9 f7       	brne	.-14     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	61 05       	cpc	r22, r1
    1016:	71 05       	cpc	r23, r1
    1018:	08 95       	ret
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	0a 2e       	mov	r0, r26
    1020:	06 94       	lsr	r0
    1022:	57 95       	ror	r21
    1024:	47 95       	ror	r20
    1026:	37 95       	ror	r19
    1028:	27 95       	ror	r18
    102a:	ba 95       	dec	r27
    102c:	c9 f7       	brne	.-14     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    102e:	62 0f       	add	r22, r18
    1030:	73 1f       	adc	r23, r19
    1032:	84 1f       	adc	r24, r20
    1034:	95 1f       	adc	r25, r21
    1036:	a0 1d       	adc	r26, r0
    1038:	08 95       	ret

0000103a <_exit>:
    103a:	f8 94       	cli

0000103c <__stop_program>:
    103c:	ff cf       	rjmp	.-2      	; 0x103c <__stop_program>

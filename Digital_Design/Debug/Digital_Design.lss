
Digital_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  0000125e  000012f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000125e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000811  00800236  00800236  00001328  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000270b  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa7  00000000  00000000  00003c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001276  00000000  00000000  00004c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00005eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a61  00000000  00000000  000063c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001354  00000000  00000000  00006e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000817d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fa c1       	rjmp	.+1012   	; 0x3f6 <__ctors_end>
       2:	00 00       	nop
       4:	17 c2       	rjmp	.+1070   	; 0x434 <__bad_interrupt>
       6:	00 00       	nop
       8:	15 c2       	rjmp	.+1066   	; 0x434 <__bad_interrupt>
       a:	00 00       	nop
       c:	13 c2       	rjmp	.+1062   	; 0x434 <__bad_interrupt>
       e:	00 00       	nop
      10:	11 c2       	rjmp	.+1058   	; 0x434 <__bad_interrupt>
      12:	00 00       	nop
      14:	0f c2       	rjmp	.+1054   	; 0x434 <__bad_interrupt>
      16:	00 00       	nop
      18:	0d c2       	rjmp	.+1050   	; 0x434 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0b c2       	rjmp	.+1046   	; 0x434 <__bad_interrupt>
      1e:	00 00       	nop
      20:	09 c2       	rjmp	.+1042   	; 0x434 <__bad_interrupt>
      22:	00 00       	nop
      24:	07 c2       	rjmp	.+1038   	; 0x434 <__bad_interrupt>
      26:	00 00       	nop
      28:	05 c2       	rjmp	.+1034   	; 0x434 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	03 c2       	rjmp	.+1030   	; 0x434 <__bad_interrupt>
      2e:	00 00       	nop
      30:	01 c2       	rjmp	.+1026   	; 0x434 <__bad_interrupt>
      32:	00 00       	nop
      34:	ff c1       	rjmp	.+1022   	; 0x434 <__bad_interrupt>
      36:	00 00       	nop
      38:	fd c1       	rjmp	.+1018   	; 0x434 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fb c1       	rjmp	.+1014   	; 0x434 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f9 c1       	rjmp	.+1010   	; 0x434 <__bad_interrupt>
      42:	00 00       	nop
      44:	f7 c1       	rjmp	.+1006   	; 0x434 <__bad_interrupt>
      46:	00 00       	nop
      48:	f5 c1       	rjmp	.+1002   	; 0x434 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f3 c1       	rjmp	.+998    	; 0x434 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f1 c1       	rjmp	.+994    	; 0x434 <__bad_interrupt>
      52:	00 00       	nop
      54:	ef c1       	rjmp	.+990    	; 0x434 <__bad_interrupt>
      56:	00 00       	nop
      58:	ed c1       	rjmp	.+986    	; 0x434 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	eb c1       	rjmp	.+982    	; 0x434 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e9 c1       	rjmp	.+978    	; 0x434 <__bad_interrupt>
      62:	00 00       	nop
      64:	bf c5       	rjmp	.+2942   	; 0xbe4 <__vector_25>
      66:	00 00       	nop
      68:	e5 c1       	rjmp	.+970    	; 0x434 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e3 c1       	rjmp	.+966    	; 0x434 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e1 c1       	rjmp	.+962    	; 0x434 <__bad_interrupt>
      72:	00 00       	nop
      74:	df c1       	rjmp	.+958    	; 0x434 <__bad_interrupt>
      76:	00 00       	nop
      78:	dd c1       	rjmp	.+954    	; 0x434 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	db c1       	rjmp	.+950    	; 0x434 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d9 c1       	rjmp	.+946    	; 0x434 <__bad_interrupt>
      82:	00 00       	nop
      84:	d7 c1       	rjmp	.+942    	; 0x434 <__bad_interrupt>
      86:	00 00       	nop
      88:	d5 c1       	rjmp	.+938    	; 0x434 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d3 c1       	rjmp	.+934    	; 0x434 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d1 c1       	rjmp	.+930    	; 0x434 <__bad_interrupt>
      92:	00 00       	nop
      94:	cf c1       	rjmp	.+926    	; 0x434 <__bad_interrupt>
      96:	00 00       	nop
      98:	cd c1       	rjmp	.+922    	; 0x434 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cb c1       	rjmp	.+918    	; 0x434 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c9 c1       	rjmp	.+914    	; 0x434 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c7 c1       	rjmp	.+910    	; 0x434 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c1       	rjmp	.+906    	; 0x434 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c3 c1       	rjmp	.+902    	; 0x434 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c1 c1       	rjmp	.+898    	; 0x434 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bf c1       	rjmp	.+894    	; 0x434 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bd c1       	rjmp	.+890    	; 0x434 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bb c1       	rjmp	.+886    	; 0x434 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b9 c1       	rjmp	.+882    	; 0x434 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b7 c1       	rjmp	.+878    	; 0x434 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b5 c1       	rjmp	.+874    	; 0x434 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b3 c1       	rjmp	.+870    	; 0x434 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b1 c1       	rjmp	.+866    	; 0x434 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	af c1       	rjmp	.+862    	; 0x434 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ad c1       	rjmp	.+858    	; 0x434 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ab c1       	rjmp	.+854    	; 0x434 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a9 c1       	rjmp	.+850    	; 0x434 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	66 03       	mulsu	r22, r22
      e6:	85 04       	cpc	r8, r5
      e8:	7c 03       	fmul	r23, r20
      ea:	94 03       	fmuls	r17, r20
      ec:	ab 03       	fmulsu	r18, r19
      ee:	cd 03       	fmulsu	r20, r21
      f0:	e2 03       	fmuls	r22, r18
      f2:	22 04       	cpc	r2, r2
      f4:	39 04       	cpc	r3, r9

000000f6 <__trampolines_end>:
	...
      fe:	00 00       	nop
     100:	5f 00       	.word	0x005f	; ????
     102:	00 00       	nop
     104:	00 00       	nop
     106:	00 00       	nop
     108:	07 00       	.word	0x0007	; ????
     10a:	07 00       	.word	0x0007	; ????
     10c:	00 00       	nop
     10e:	00 14       	cp	r0, r0
     110:	7f 14       	cp	r7, r15
     112:	7f 14       	cp	r7, r15
     114:	00 00       	nop
     116:	00 24       	eor	r0, r0
     118:	2a 7f       	andi	r18, 0xFA	; 250
     11a:	2a 12       	cpse	r2, r26
     11c:	00 00       	nop
     11e:	00 23       	and	r16, r16
     120:	13 08       	sbc	r1, r3
     122:	64 62       	ori	r22, 0x24	; 36
     124:	00 00       	nop
     126:	00 36       	cpi	r16, 0x60	; 96
     128:	49 55       	subi	r20, 0x59	; 89
     12a:	22 50       	subi	r18, 0x02	; 2
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	05 03       	mulsu	r16, r21
     132:	00 00       	nop
     134:	00 00       	nop
     136:	00 1c       	adc	r0, r0
     138:	22 41       	sbci	r18, 0x12	; 18
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 41       	sbci	r16, 0x10	; 16
     140:	22 1c       	adc	r2, r2
     142:	00 00       	nop
     144:	00 00       	nop
     146:	00 08       	sbc	r0, r0
     148:	2a 1c       	adc	r2, r10
     14a:	2a 08       	sbc	r2, r10
     14c:	00 00       	nop
     14e:	00 08       	sbc	r0, r0
     150:	08 3e       	cpi	r16, 0xE8	; 232
     152:	08 08       	sbc	r0, r8
     154:	00 00       	nop
     156:	00 a0       	ldd	r0, Z+32	; 0x20
     158:	60 00       	.word	0x0060	; ????
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	00 08       	sbc	r0, r0
     160:	08 08       	sbc	r0, r8
     162:	08 08       	sbc	r0, r8
     164:	00 00       	nop
     166:	00 60       	ori	r16, 0x00	; 0
     168:	60 00       	.word	0x0060	; ????
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	00 20       	and	r0, r0
     170:	10 08       	sbc	r1, r0
     172:	04 02       	muls	r16, r20
     174:	00 00       	nop
     176:	00 3e       	cpi	r16, 0xE0	; 224
     178:	51 49       	sbci	r21, 0x91	; 145
     17a:	45 3e       	cpi	r20, 0xE5	; 229
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	42 7f       	andi	r20, 0xF2	; 242
     182:	40 00       	.word	0x0040	; ????
     184:	00 00       	nop
     186:	00 62       	ori	r16, 0x20	; 32
     188:	51 49       	sbci	r21, 0x91	; 145
     18a:	49 46       	sbci	r20, 0x69	; 105
     18c:	00 00       	nop
     18e:	00 22       	and	r0, r16
     190:	41 49       	sbci	r20, 0x91	; 145
     192:	49 36       	cpi	r20, 0x69	; 105
     194:	00 00       	nop
     196:	00 18       	sub	r0, r0
     198:	14 12       	cpse	r1, r20
     19a:	7f 10       	cpse	r7, r15
     19c:	00 00       	nop
     19e:	00 27       	eor	r16, r16
     1a0:	45 45       	sbci	r20, 0x55	; 85
     1a2:	45 39       	cpi	r20, 0x95	; 149
     1a4:	00 00       	nop
     1a6:	00 3c       	cpi	r16, 0xC0	; 192
     1a8:	4a 49       	sbci	r20, 0x9A	; 154
     1aa:	49 30       	cpi	r20, 0x09	; 9
     1ac:	00 00       	nop
     1ae:	00 01       	movw	r0, r0
     1b0:	71 09       	sbc	r23, r1
     1b2:	05 03       	mulsu	r16, r21
     1b4:	00 00       	nop
     1b6:	00 36       	cpi	r16, 0x60	; 96
     1b8:	49 49       	sbci	r20, 0x99	; 153
     1ba:	49 36       	cpi	r20, 0x69	; 105
     1bc:	00 00       	nop
     1be:	00 06       	cpc	r0, r16
     1c0:	49 49       	sbci	r20, 0x99	; 153
     1c2:	29 1e       	adc	r2, r25
     1c4:	00 00       	nop
     1c6:	00 00       	nop
     1c8:	36 36       	cpi	r19, 0x66	; 102
     1ca:	00 00       	nop
     1cc:	00 00       	nop
     1ce:	00 00       	nop
     1d0:	ac 6c       	ori	r26, 0xCC	; 204
     1d2:	00 00       	nop
     1d4:	00 00       	nop
     1d6:	00 08       	sbc	r0, r0
     1d8:	14 22       	and	r1, r20
     1da:	41 00       	.word	0x0041	; ????
     1dc:	00 00       	nop
     1de:	00 14       	cp	r0, r0
     1e0:	14 14       	cp	r1, r4
     1e2:	14 14       	cp	r1, r4
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	22 14       	cp	r2, r2
     1ea:	08 00       	.word	0x0008	; ????
     1ec:	00 00       	nop
     1ee:	00 02       	muls	r16, r16
     1f0:	01 51       	subi	r16, 0x11	; 17
     1f2:	09 06       	cpc	r0, r25
     1f4:	00 00       	nop
     1f6:	00 32       	cpi	r16, 0x20	; 32
     1f8:	49 79       	andi	r20, 0x99	; 153
     1fa:	41 3e       	cpi	r20, 0xE1	; 225
     1fc:	00 00       	nop
     1fe:	00 7e       	andi	r16, 0xE0	; 224
     200:	09 09       	sbc	r16, r9
     202:	09 7e       	andi	r16, 0xE9	; 233
     204:	00 00       	nop
     206:	00 7f       	andi	r16, 0xF0	; 240
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	49 36       	cpi	r20, 0x69	; 105
     20c:	00 00       	nop
     20e:	00 3e       	cpi	r16, 0xE0	; 224
     210:	41 41       	sbci	r20, 0x11	; 17
     212:	41 22       	and	r4, r17
     214:	00 00       	nop
     216:	00 7f       	andi	r16, 0xF0	; 240
     218:	41 41       	sbci	r20, 0x11	; 17
     21a:	22 1c       	adc	r2, r2
     21c:	00 00       	nop
     21e:	00 7f       	andi	r16, 0xF0	; 240
     220:	49 49       	sbci	r20, 0x99	; 153
     222:	49 41       	sbci	r20, 0x19	; 25
     224:	00 00       	nop
     226:	00 7f       	andi	r16, 0xF0	; 240
     228:	09 09       	sbc	r16, r9
     22a:	09 01       	movw	r0, r18
     22c:	00 00       	nop
     22e:	00 3e       	cpi	r16, 0xE0	; 224
     230:	41 41       	sbci	r20, 0x11	; 17
     232:	51 72       	andi	r21, 0x21	; 33
     234:	00 00       	nop
     236:	00 7f       	andi	r16, 0xF0	; 240
     238:	08 08       	sbc	r0, r8
     23a:	08 7f       	andi	r16, 0xF8	; 248
     23c:	00 00       	nop
     23e:	00 41       	sbci	r16, 0x10	; 16
     240:	7f 41       	sbci	r23, 0x1F	; 31
     242:	00 00       	nop
     244:	00 00       	nop
     246:	00 20       	and	r0, r0
     248:	40 41       	sbci	r20, 0x10	; 16
     24a:	3f 01       	movw	r6, r30
     24c:	00 00       	nop
     24e:	00 7f       	andi	r16, 0xF0	; 240
     250:	08 14       	cp	r0, r8
     252:	22 41       	sbci	r18, 0x12	; 18
     254:	00 00       	nop
     256:	00 7f       	andi	r16, 0xF0	; 240
     258:	40 40       	sbci	r20, 0x00	; 0
     25a:	40 40       	sbci	r20, 0x00	; 0
     25c:	00 00       	nop
     25e:	00 7f       	andi	r16, 0xF0	; 240
     260:	02 0c       	add	r0, r2
     262:	02 7f       	andi	r16, 0xF2	; 242
     264:	00 00       	nop
     266:	00 7f       	andi	r16, 0xF0	; 240
     268:	04 08       	sbc	r0, r4
     26a:	10 7f       	andi	r17, 0xF0	; 240
     26c:	00 00       	nop
     26e:	00 3e       	cpi	r16, 0xE0	; 224
     270:	41 41       	sbci	r20, 0x11	; 17
     272:	41 3e       	cpi	r20, 0xE1	; 225
     274:	00 00       	nop
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	09 09       	sbc	r16, r9
     27a:	09 06       	cpc	r0, r25
     27c:	00 00       	nop
     27e:	00 3e       	cpi	r16, 0xE0	; 224
     280:	41 51       	subi	r20, 0x11	; 17
     282:	21 5e       	subi	r18, 0xE1	; 225
     284:	00 00       	nop
     286:	00 7f       	andi	r16, 0xF0	; 240
     288:	09 19       	sub	r16, r9
     28a:	29 46       	sbci	r18, 0x69	; 105
     28c:	00 00       	nop
     28e:	00 26       	eor	r0, r16
     290:	49 49       	sbci	r20, 0x99	; 153
     292:	49 32       	cpi	r20, 0x29	; 41
     294:	00 00       	nop
     296:	00 01       	movw	r0, r0
     298:	01 7f       	andi	r16, 0xF1	; 241
     29a:	01 01       	movw	r0, r2
     29c:	00 00       	nop
     29e:	00 3f       	cpi	r16, 0xF0	; 240
     2a0:	40 40       	sbci	r20, 0x00	; 0
     2a2:	40 3f       	cpi	r20, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 1f       	adc	r16, r16
     2a8:	20 40       	sbci	r18, 0x00	; 0
     2aa:	20 1f       	adc	r18, r16
     2ac:	00 00       	nop
     2ae:	00 3f       	cpi	r16, 0xF0	; 240
     2b0:	40 38       	cpi	r20, 0x80	; 128
     2b2:	40 3f       	cpi	r20, 0xF0	; 240
     2b4:	00 00       	nop
     2b6:	00 63       	ori	r16, 0x30	; 48
     2b8:	14 08       	sbc	r1, r4
     2ba:	14 63       	ori	r17, 0x34	; 52
     2bc:	00 00       	nop
     2be:	00 03       	mulsu	r16, r16
     2c0:	04 78       	andi	r16, 0x84	; 132
     2c2:	04 03       	mulsu	r16, r20
     2c4:	00 00       	nop
     2c6:	00 61       	ori	r16, 0x10	; 16
     2c8:	51 49       	sbci	r21, 0x91	; 145
     2ca:	45 43       	sbci	r20, 0x35	; 53
     2cc:	00 00       	nop
     2ce:	00 7f       	andi	r16, 0xF0	; 240
     2d0:	41 41       	sbci	r20, 0x11	; 17
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 02       	muls	r16, r16
     2d8:	04 08       	sbc	r0, r4
     2da:	10 20       	and	r1, r0
     2dc:	00 00       	nop
     2de:	00 41       	sbci	r16, 0x10	; 16
     2e0:	41 7f       	andi	r20, 0xF1	; 241
     2e2:	00 00       	nop
     2e4:	00 00       	nop
     2e6:	00 04       	cpc	r0, r0
     2e8:	02 01       	movw	r0, r4
     2ea:	02 04       	cpc	r0, r2
     2ec:	00 00       	nop
     2ee:	00 80       	ld	r0, Z
     2f0:	80 80       	ld	r8, Z
     2f2:	80 80       	ld	r8, Z
     2f4:	00 00       	nop
     2f6:	00 01       	movw	r0, r0
     2f8:	02 04       	cpc	r0, r2
     2fa:	00 00       	nop
     2fc:	00 00       	nop
     2fe:	00 20       	and	r0, r0
     300:	54 54       	subi	r21, 0x44	; 68
     302:	54 78       	andi	r21, 0x84	; 132
     304:	00 00       	nop
     306:	00 7f       	andi	r16, 0xF0	; 240
     308:	48 44       	sbci	r20, 0x48	; 72
     30a:	44 38       	cpi	r20, 0x84	; 132
     30c:	00 00       	nop
     30e:	00 38       	cpi	r16, 0x80	; 128
     310:	44 44       	sbci	r20, 0x44	; 68
     312:	28 00       	.word	0x0028	; ????
     314:	00 00       	nop
     316:	00 38       	cpi	r16, 0x80	; 128
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	48 7f       	andi	r20, 0xF8	; 248
     31c:	00 00       	nop
     31e:	00 38       	cpi	r16, 0x80	; 128
     320:	54 54       	subi	r21, 0x44	; 68
     322:	54 18       	sub	r5, r4
     324:	00 00       	nop
     326:	00 08       	sbc	r0, r0
     328:	7e 09       	sbc	r23, r14
     32a:	02 00       	.word	0x0002	; ????
     32c:	00 00       	nop
     32e:	00 18       	sub	r0, r0
     330:	a4 a4       	ldd	r10, Z+44	; 0x2c
     332:	a4 7c       	andi	r26, 0xC4	; 196
     334:	00 00       	nop
     336:	00 7f       	andi	r16, 0xF0	; 240
     338:	08 04       	cpc	r0, r8
     33a:	04 78       	andi	r16, 0x84	; 132
     33c:	00 00       	nop
     33e:	00 00       	nop
     340:	7d 00       	.word	0x007d	; ????
     342:	00 00       	nop
     344:	00 00       	nop
     346:	00 80       	ld	r0, Z
     348:	84 7d       	andi	r24, 0xD4	; 212
     34a:	00 00       	nop
     34c:	00 00       	nop
     34e:	00 7f       	andi	r16, 0xF0	; 240
     350:	10 28       	or	r1, r0
     352:	44 00       	.word	0x0044	; ????
     354:	00 00       	nop
     356:	00 41       	sbci	r16, 0x10	; 16
     358:	7f 40       	sbci	r23, 0x0F	; 15
     35a:	00 00       	nop
     35c:	00 00       	nop
     35e:	00 7c       	andi	r16, 0xC0	; 192
     360:	04 18       	sub	r0, r4
     362:	04 78       	andi	r16, 0x84	; 132
     364:	00 00       	nop
     366:	00 7c       	andi	r16, 0xC0	; 192
     368:	08 04       	cpc	r0, r8
     36a:	7c 00       	.word	0x007c	; ????
     36c:	00 00       	nop
     36e:	00 38       	cpi	r16, 0x80	; 128
     370:	44 44       	sbci	r20, 0x44	; 68
     372:	38 00       	.word	0x0038	; ????
     374:	00 00       	nop
     376:	00 fc       	sbrc	r0, 0
     378:	24 24       	eor	r2, r4
     37a:	18 00       	.word	0x0018	; ????
     37c:	00 00       	nop
     37e:	00 18       	sub	r0, r0
     380:	24 24       	eor	r2, r4
     382:	fc 00       	.word	0x00fc	; ????
     384:	00 00       	nop
     386:	00 00       	nop
     388:	7c 08       	sbc	r7, r12
     38a:	04 00       	.word	0x0004	; ????
     38c:	00 00       	nop
     38e:	00 48       	sbci	r16, 0x80	; 128
     390:	54 54       	subi	r21, 0x44	; 68
     392:	24 00       	.word	0x0024	; ????
     394:	00 00       	nop
     396:	00 04       	cpc	r0, r0
     398:	7f 44       	sbci	r23, 0x4F	; 79
     39a:	00 00       	nop
     39c:	00 00       	nop
     39e:	00 3c       	cpi	r16, 0xC0	; 192
     3a0:	40 40       	sbci	r20, 0x00	; 0
     3a2:	7c 00       	.word	0x007c	; ????
     3a4:	00 00       	nop
     3a6:	00 1c       	adc	r0, r0
     3a8:	20 40       	sbci	r18, 0x00	; 0
     3aa:	20 1c       	adc	r2, r0
     3ac:	00 00       	nop
     3ae:	00 3c       	cpi	r16, 0xC0	; 192
     3b0:	40 30       	cpi	r20, 0x00	; 0
     3b2:	40 3c       	cpi	r20, 0xC0	; 192
     3b4:	00 00       	nop
     3b6:	00 44       	sbci	r16, 0x40	; 64
     3b8:	28 10       	cpse	r2, r8
     3ba:	28 44       	sbci	r18, 0x48	; 72
     3bc:	00 00       	nop
     3be:	00 1c       	adc	r0, r0
     3c0:	a0 a0       	ldd	r10, Z+32	; 0x20
     3c2:	7c 00       	.word	0x007c	; ????
     3c4:	00 00       	nop
     3c6:	00 44       	sbci	r16, 0x40	; 64
     3c8:	64 54       	subi	r22, 0x44	; 68
     3ca:	4c 44       	sbci	r20, 0x4C	; 76
     3cc:	00 00       	nop
     3ce:	00 08       	sbc	r0, r0
     3d0:	36 41       	sbci	r19, 0x16	; 22
     3d2:	00 00       	nop
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	7f 00       	.word	0x007f	; ????
     3da:	00 00       	nop
     3dc:	00 00       	nop
     3de:	00 41       	sbci	r16, 0x10	; 16
     3e0:	36 08       	sbc	r3, r6
     3e2:	00 00       	nop
     3e4:	00 00       	nop
     3e6:	00 02       	muls	r16, r16
     3e8:	01 01       	movw	r0, r2
     3ea:	02 01       	movw	r0, r4
     3ec:	00 00       	nop
     3ee:	00 02       	muls	r16, r16
     3f0:	05 05       	cpc	r16, r5
     3f2:	02 00       	.word	0x0002	; ????
	...

000003f6 <__ctors_end>:
     3f6:	11 24       	eor	r1, r1
     3f8:	1f be       	out	0x3f, r1	; 63
     3fa:	cf ef       	ldi	r28, 0xFF	; 255
     3fc:	d1 e2       	ldi	r29, 0x21	; 33
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	cd bf       	out	0x3d, r28	; 61
     402:	00 e0       	ldi	r16, 0x00	; 0
     404:	0c bf       	out	0x3c, r16	; 60

00000406 <__do_copy_data>:
     406:	12 e0       	ldi	r17, 0x02	; 2
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b2 e0       	ldi	r27, 0x02	; 2
     40c:	ee e5       	ldi	r30, 0x5E	; 94
     40e:	f2 e1       	ldi	r31, 0x12	; 18
     410:	00 e0       	ldi	r16, 0x00	; 0
     412:	0b bf       	out	0x3b, r16	; 59
     414:	02 c0       	rjmp	.+4      	; 0x41a <__do_copy_data+0x14>
     416:	07 90       	elpm	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	a6 33       	cpi	r26, 0x36	; 54
     41c:	b1 07       	cpc	r27, r17
     41e:	d9 f7       	brne	.-10     	; 0x416 <__do_copy_data+0x10>

00000420 <__do_clear_bss>:
     420:	2a e0       	ldi	r18, 0x0A	; 10
     422:	a6 e3       	ldi	r26, 0x36	; 54
     424:	b2 e0       	ldi	r27, 0x02	; 2
     426:	01 c0       	rjmp	.+2      	; 0x42a <.do_clear_bss_start>

00000428 <.do_clear_bss_loop>:
     428:	1d 92       	st	X+, r1

0000042a <.do_clear_bss_start>:
     42a:	a7 34       	cpi	r26, 0x47	; 71
     42c:	b2 07       	cpc	r27, r18
     42e:	e1 f7       	brne	.-8      	; 0x428 <.do_clear_bss_loop>
     430:	33 d3       	rcall	.+1638   	; 0xa98 <main>
     432:	13 c7       	rjmp	.+3622   	; 0x125a <_exit>

00000434 <__bad_interrupt>:
     434:	e5 cd       	rjmp	.-1078   	; 0x0 <__vectors>

00000436 <I2C_Init>:
	}
	// the range of contrast to too small to be really useful
	// it is useful to dim the display
	ssd1306_command(SSD1306_SETCONTRAST);
	ssd1306_command(contrast);
     436:	81 b1       	in	r24, 0x01	; 1
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	81 b9       	out	0x01, r24	; 1
     43c:	82 b1       	in	r24, 0x02	; 2
     43e:	81 60       	ori	r24, 0x01	; 1
     440:	82 b9       	out	0x02, r24	; 2
     442:	2f ef       	ldi	r18, 0xFF	; 255
     444:	83 ed       	ldi	r24, 0xD3	; 211
     446:	90 e3       	ldi	r25, 0x30	; 48
     448:	21 50       	subi	r18, 0x01	; 1
     44a:	80 40       	sbci	r24, 0x00	; 0
     44c:	90 40       	sbci	r25, 0x00	; 0
     44e:	e1 f7       	brne	.-8      	; 0x448 <I2C_Init+0x12>
     450:	00 c0       	rjmp	.+0      	; 0x452 <I2C_Init+0x1c>
     452:	00 00       	nop
     454:	82 e1       	ldi	r24, 0x12	; 18
     456:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     45a:	e9 eb       	ldi	r30, 0xB9	; 185
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	8c 7f       	andi	r24, 0xFC	; 252
     462:	80 83       	st	Z, r24
     464:	85 e0       	ldi	r24, 0x05	; 5
     466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     46a:	08 95       	ret

0000046c <I2C_Start>:
     46c:	94 ea       	ldi	r25, 0xA4	; 164
     46e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     472:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     476:	99 23       	and	r25, r25
     478:	e4 f7       	brge	.-8      	; 0x472 <I2C_Start+0x6>
     47a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     47e:	98 7f       	andi	r25, 0xF8	; 248
     480:	98 30       	cpi	r25, 0x08	; 8
     482:	91 f4       	brne	.+36     	; 0x4a8 <I2C_Start+0x3c>
     484:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     488:	84 e8       	ldi	r24, 0x84	; 132
     48a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     48e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     492:	88 23       	and	r24, r24
     494:	e4 f7       	brge	.-8      	; 0x48e <I2C_Start+0x22>
     496:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	88 31       	cpi	r24, 0x18	; 24
     49e:	31 f0       	breq	.+12     	; 0x4ac <I2C_Start+0x40>
     4a0:	80 32       	cpi	r24, 0x20	; 32
     4a2:	31 f4       	brne	.+12     	; 0x4b0 <I2C_Start+0x44>
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	08 95       	ret
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	08 95       	ret
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	08 95       	ret
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	08 95       	ret

000004b4 <I2C_Write>:
     4b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     4b8:	84 e8       	ldi	r24, 0x84	; 132
     4ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4c2:	88 23       	and	r24, r24
     4c4:	e4 f7       	brge	.-8      	; 0x4be <I2C_Write+0xa>
     4c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     4ca:	88 7f       	andi	r24, 0xF8	; 248
     4cc:	88 32       	cpi	r24, 0x28	; 40
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <I2C_Write+0x24>
     4d0:	80 33       	cpi	r24, 0x30	; 48
     4d2:	21 f4       	brne	.+8      	; 0x4dc <I2C_Write+0x28>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	08 95       	ret
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	08 95       	ret
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	08 95       	ret

000004e0 <I2C_Stop>:
     4e0:	84 e9       	ldi	r24, 0x94	; 148
     4e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4ea:	84 fd       	sbrc	r24, 4
     4ec:	fc cf       	rjmp	.-8      	; 0x4e6 <I2C_Stop+0x6>
     4ee:	08 95       	ret

000004f0 <ssd1306_command>:
     4f0:	cf 93       	push	r28
     4f2:	c8 2f       	mov	r28, r24
     4f4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_i2c_address>
     4f8:	b9 df       	rcall	.-142    	; 0x46c <I2C_Start>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	db df       	rcall	.-74     	; 0x4b4 <I2C_Write>
     4fe:	8c 2f       	mov	r24, r28
     500:	d9 df       	rcall	.-78     	; 0x4b4 <I2C_Write>
     502:	ee df       	rcall	.-36     	; 0x4e0 <I2C_Stop>
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <InitializeDisplay>:
     508:	8e ea       	ldi	r24, 0xAE	; 174
     50a:	f2 df       	rcall	.-28     	; 0x4f0 <ssd1306_command>
     50c:	85 ed       	ldi	r24, 0xD5	; 213
     50e:	f0 df       	rcall	.-32     	; 0x4f0 <ssd1306_command>
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	ee df       	rcall	.-36     	; 0x4f0 <ssd1306_command>
     514:	88 ea       	ldi	r24, 0xA8	; 168
     516:	ec df       	rcall	.-40     	; 0x4f0 <ssd1306_command>
     518:	8f e3       	ldi	r24, 0x3F	; 63
     51a:	ea df       	rcall	.-44     	; 0x4f0 <ssd1306_command>
     51c:	83 ed       	ldi	r24, 0xD3	; 211
     51e:	e8 df       	rcall	.-48     	; 0x4f0 <ssd1306_command>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	e6 df       	rcall	.-52     	; 0x4f0 <ssd1306_command>
     524:	80 e4       	ldi	r24, 0x40	; 64
     526:	e4 df       	rcall	.-56     	; 0x4f0 <ssd1306_command>
     528:	8d e8       	ldi	r24, 0x8D	; 141
     52a:	e2 df       	rcall	.-60     	; 0x4f0 <ssd1306_command>
     52c:	84 e1       	ldi	r24, 0x14	; 20
     52e:	e0 df       	rcall	.-64     	; 0x4f0 <ssd1306_command>
     530:	80 e2       	ldi	r24, 0x20	; 32
     532:	de df       	rcall	.-68     	; 0x4f0 <ssd1306_command>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	dc df       	rcall	.-72     	; 0x4f0 <ssd1306_command>
     538:	81 ea       	ldi	r24, 0xA1	; 161
     53a:	da df       	rcall	.-76     	; 0x4f0 <ssd1306_command>
     53c:	88 ec       	ldi	r24, 0xC8	; 200
     53e:	d8 df       	rcall	.-80     	; 0x4f0 <ssd1306_command>
     540:	8a ed       	ldi	r24, 0xDA	; 218
     542:	d6 df       	rcall	.-84     	; 0x4f0 <ssd1306_command>
     544:	82 e1       	ldi	r24, 0x12	; 18
     546:	d4 df       	rcall	.-88     	; 0x4f0 <ssd1306_command>
     548:	81 e8       	ldi	r24, 0x81	; 129
     54a:	d2 df       	rcall	.-92     	; 0x4f0 <ssd1306_command>
     54c:	8f ec       	ldi	r24, 0xCF	; 207
     54e:	d0 df       	rcall	.-96     	; 0x4f0 <ssd1306_command>
     550:	89 ed       	ldi	r24, 0xD9	; 217
     552:	ce df       	rcall	.-100    	; 0x4f0 <ssd1306_command>
     554:	81 ef       	ldi	r24, 0xF1	; 241
     556:	cc df       	rcall	.-104    	; 0x4f0 <ssd1306_command>
     558:	8b ed       	ldi	r24, 0xDB	; 219
     55a:	ca df       	rcall	.-108    	; 0x4f0 <ssd1306_command>
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	c8 df       	rcall	.-112    	; 0x4f0 <ssd1306_command>
     560:	84 ea       	ldi	r24, 0xA4	; 164
     562:	c6 df       	rcall	.-116    	; 0x4f0 <ssd1306_command>
     564:	86 ea       	ldi	r24, 0xA6	; 166
     566:	c4 df       	rcall	.-120    	; 0x4f0 <ssd1306_command>
     568:	8f ea       	ldi	r24, 0xAF	; 175
     56a:	c2 cf       	rjmp	.-124    	; 0x4f0 <ssd1306_command>
     56c:	08 95       	ret

0000056e <SendChar>:
     56e:	cf 93       	push	r28
     570:	c8 2f       	mov	r28, r24
     572:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_i2c_address>
     576:	7a df       	rcall	.-268    	; 0x46c <I2C_Start>
     578:	80 e4       	ldi	r24, 0x40	; 64
     57a:	9c df       	rcall	.-200    	; 0x4b4 <I2C_Write>
     57c:	8c 2f       	mov	r24, r28
     57e:	9a df       	rcall	.-204    	; 0x4b4 <I2C_Write>
     580:	af df       	rcall	.-162    	; 0x4e0 <I2C_Stop>
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <setXY>:
     586:	cf 93       	push	r28
     588:	c6 2f       	mov	r28, r22
     58a:	80 55       	subi	r24, 0x50	; 80
     58c:	b1 df       	rcall	.-158    	; 0x4f0 <ssd1306_command>
     58e:	8c 2f       	mov	r24, r28
     590:	88 0f       	add	r24, r24
     592:	88 0f       	add	r24, r24
     594:	88 0f       	add	r24, r24
     596:	88 70       	andi	r24, 0x08	; 8
     598:	ab df       	rcall	.-170    	; 0x4f0 <ssd1306_command>
     59a:	8c 2f       	mov	r24, r28
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	96 95       	lsr	r25
     5a0:	87 95       	ror	r24
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	80 5f       	subi	r24, 0xF0	; 240
     5a6:	a4 df       	rcall	.-184    	; 0x4f0 <ssd1306_command>
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <clear_display>:
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	d0 e0       	ldi	r29, 0x00	; 0
     5b2:	0b c0       	rjmp	.+22     	; 0x5ca <clear_display+0x1e>
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	8d 2f       	mov	r24, r29
     5b8:	e6 df       	rcall	.-52     	; 0x586 <setXY>
     5ba:	c0 e0       	ldi	r28, 0x00	; 0
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <clear_display+0x18>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	d6 df       	rcall	.-84     	; 0x56e <SendChar>
     5c2:	cf 5f       	subi	r28, 0xFF	; 255
     5c4:	cc 23       	and	r28, r28
     5c6:	dc f7       	brge	.-10     	; 0x5be <clear_display+0x12>
     5c8:	df 5f       	subi	r29, 0xFF	; 255
     5ca:	d8 30       	cpi	r29, 0x08	; 8
     5cc:	98 f3       	brcs	.-26     	; 0x5b4 <clear_display+0x8>
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <sendStrXY>:
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
     5de:	86 2f       	mov	r24, r22
     5e0:	06 2f       	mov	r16, r22
     5e2:	64 2f       	mov	r22, r20
     5e4:	d0 df       	rcall	.-96     	; 0x586 <setXY>
     5e6:	1c c0       	rjmp	.+56     	; 0x620 <sendStrXY+0x4c>
     5e8:	8a 30       	cpi	r24, 0x0A	; 10
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <sendStrXY+0x22>
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 0f       	add	r24, r16
     5f2:	c9 df       	rcall	.-110    	; 0x586 <setXY>
     5f4:	21 96       	adiw	r28, 0x01	; 1
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	10 c0       	rjmp	.+32     	; 0x61a <sendStrXY+0x46>
     5fa:	e8 81       	ld	r30, Y
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	b0 97       	sbiw	r30, 0x20	; 32
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ea 50       	subi	r30, 0x0A	; 10
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	e1 0f       	add	r30, r17
     612:	f1 1d       	adc	r31, r1
     614:	84 91       	lpm	r24, Z
     616:	ab df       	rcall	.-170    	; 0x56e <SendChar>
     618:	1f 5f       	subi	r17, 0xFF	; 255
     61a:	18 30       	cpi	r17, 0x08	; 8
     61c:	70 f3       	brcs	.-36     	; 0x5fa <sendStrXY+0x26>
     61e:	21 96       	adiw	r28, 0x01	; 1
     620:	88 81       	ld	r24, Y
     622:	81 11       	cpse	r24, r1
     624:	e1 cf       	rjmp	.-62     	; 0x5e8 <sendStrXY+0x14>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <print_fonts>:
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	b6 df       	rcall	.-148    	; 0x5ac <clear_display>
     640:	e1 2c       	mov	r14, r1
     642:	f1 2c       	mov	r15, r1
     644:	68 94       	set
     646:	dd 24       	eor	r13, r13
     648:	d5 f8       	bld	r13, 5
     64a:	27 c0       	rjmp	.+78     	; 0x69a <print_fonts+0x6a>
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	8e 2d       	mov	r24, r14
     650:	9a df       	rcall	.-204    	; 0x586 <setXY>
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	19 c0       	rjmp	.+50     	; 0x68a <print_fonts+0x5a>
     658:	f8 01       	movw	r30, r16
     65a:	ed 0d       	add	r30, r13
     65c:	f1 1d       	adc	r31, r1
     65e:	b0 97       	sbiw	r30, 0x20	; 32
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	ea 50       	subi	r30, 0x0A	; 10
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	84 91       	lpm	r24, Z
     676:	7b df       	rcall	.-266    	; 0x56e <SendChar>
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	02 c0       	rjmp	.+4      	; 0x680 <print_fonts+0x50>
     67c:	c0 e0       	ldi	r28, 0x00	; 0
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	c8 30       	cpi	r28, 0x08	; 8
     682:	d1 05       	cpc	r29, r1
     684:	4c f3       	brlt	.-46     	; 0x658 <print_fonts+0x28>
     686:	0f 5f       	subi	r16, 0xFF	; 255
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	00 31       	cpi	r16, 0x10	; 16
     68c:	11 05       	cpc	r17, r1
     68e:	b4 f3       	brlt	.-20     	; 0x67c <print_fonts+0x4c>
     690:	80 e1       	ldi	r24, 0x10	; 16
     692:	d8 0e       	add	r13, r24
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	e8 1a       	sub	r14, r24
     698:	f8 0a       	sbc	r15, r24
     69a:	86 e0       	ldi	r24, 0x06	; 6
     69c:	e8 16       	cp	r14, r24
     69e:	f1 04       	cpc	r15, r1
     6a0:	ac f2       	brlt	.-86     	; 0x64c <print_fonts+0x1c>
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	08 95       	ret

000006b2 <evaluate_recieve>:
char spi_package[2]={0};
char test = 05;
char test2 = 11;
void evaluate_recieve(){
	
	switch(state){
     6b2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <state>
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	89 30       	cpi	r24, 0x09	; 9
     6ba:	91 05       	cpc	r25, r1
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <evaluate_recieve+0xe>
     6be:	25 c1       	rjmp	.+586    	; 0x90a <evaluate_recieve+0x258>
     6c0:	fc 01       	movw	r30, r24
     6c2:	88 27       	eor	r24, r24
     6c4:	ee 58       	subi	r30, 0x8E	; 142
     6c6:	ff 4f       	sbci	r31, 0xFF	; 255
     6c8:	8f 4f       	sbci	r24, 0xFF	; 255
     6ca:	e4 c2       	rjmp	.+1480   	; 0xc94 <__tablejump2__>
		
		case sync1:
		if(UARTBuffer[uart_cnt++] == 0x55){
     6cc:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     6d0:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     6d4:	9c 01       	movw	r18, r24
     6d6:	2f 5f       	subi	r18, 0xFF	; 255
     6d8:	3f 4f       	sbci	r19, 0xFF	; 255
     6da:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     6de:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     6e2:	fc 01       	movw	r30, r24
     6e4:	ee 5a       	subi	r30, 0xAE	; 174
     6e6:	f9 4f       	sbci	r31, 0xF9	; 249
     6e8:	80 81       	ld	r24, Z
     6ea:	85 35       	cpi	r24, 0x55	; 85
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <evaluate_recieve+0x3e>
     6ee:	0d c1       	rjmp	.+538    	; 0x90a <evaluate_recieve+0x258>
			state = sync2;
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
     6f6:	08 95       	ret
		}
		break;
		
		case sync2:
		if(UARTBuffer[uart_cnt++]==0xAA){
     6f8:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     6fc:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     700:	9c 01       	movw	r18, r24
     702:	2f 5f       	subi	r18, 0xFF	; 255
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     70a:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     70e:	fc 01       	movw	r30, r24
     710:	ee 5a       	subi	r30, 0xAE	; 174
     712:	f9 4f       	sbci	r31, 0xF9	; 249
     714:	80 81       	ld	r24, Z
     716:	8a 3a       	cpi	r24, 0xAA	; 170
     718:	21 f4       	brne	.+8      	; 0x722 <evaluate_recieve+0x70>
			state = Length;
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
     720:	08 95       	ret
			}
		else{
			state = sync1;
     722:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <state>
     726:	08 95       	ret
		}
		break;
		
		case Length:
		Len = (UARTBuffer[uart_cnt++]<<8);
     728:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     72c:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     730:	9c 01       	movw	r18, r24
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     73a:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     73e:	fc 01       	movw	r30, r24
     740:	ee 5a       	subi	r30, 0xAE	; 174
     742:	f9 4f       	sbci	r31, 0xF9	; 249
     744:	80 81       	ld	r24, Z
     746:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <Len>
     74a:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <Len+0x1>
		state = Length2;
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
		break;
     754:	08 95       	ret
		
		case Length2:
		Len = Len + (UARTBuffer[uart_cnt++]);
     756:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     75a:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     75e:	9c 01       	movw	r18, r24
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     768:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     76c:	fc 01       	movw	r30, r24
     76e:	ee 5a       	subi	r30, 0xAE	; 174
     770:	f9 4f       	sbci	r31, 0xF9	; 249
     772:	20 81       	ld	r18, Z
     774:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <Len>
     778:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <Len+0x1>
     77c:	82 0f       	add	r24, r18
     77e:	91 1d       	adc	r25, r1
     780:	90 93 51 06 	sts	0x0651, r25	; 0x800651 <Len+0x1>
     784:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <Len>
		compare = Len-2;
     788:	02 97       	sbiw	r24, 0x02	; 2
     78a:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <compare+0x1>
     78e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <compare>
		state = Type;			
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
		break;
     798:	08 95       	ret
		
		case Type:
		uart_type = UARTBuffer[uart_cnt++];
     79a:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     79e:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     7a2:	9c 01       	movw	r18, r24
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     7ac:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     7b0:	fc 01       	movw	r30, r24
     7b2:	ee 5a       	subi	r30, 0xAE	; 174
     7b4:	f9 4f       	sbci	r31, 0xF9	; 249
     7b6:	80 81       	ld	r24, Z
     7b8:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <uart_type>
		/*memset(data,0,datasize);*/
		state = ReadData;
     7bc:	86 e0       	ldi	r24, 0x06	; 6
     7be:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
		break;
     7c2:	08 95       	ret
		
		case ReadData:
		if(Len>7){
     7c4:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <Len>
     7c8:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <Len+0x1>
     7cc:	08 97       	sbiw	r24, 0x08	; 8
     7ce:	d0 f4       	brcc	.+52     	; 0x804 <evaluate_recieve+0x152>
     7d0:	08 95       	ret
			while(uart_cnt < (compare)){
				data[uart_cnt-5]=UARTBuffer[uart_cnt];
     7d2:	e0 91 41 0a 	lds	r30, 0x0A41	; 0x800a41 <uart_cnt>
     7d6:	f0 91 42 0a 	lds	r31, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     7da:	a0 91 41 0a 	lds	r26, 0x0A41	; 0x800a41 <uart_cnt>
     7de:	b0 91 42 0a 	lds	r27, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     7e2:	ae 5a       	subi	r26, 0xAE	; 174
     7e4:	b9 4f       	sbci	r27, 0xF9	; 249
     7e6:	2c 91       	ld	r18, X
     7e8:	e9 5a       	subi	r30, 0xA9	; 169
     7ea:	fd 4f       	sbci	r31, 0xFD	; 253
     7ec:	20 83       	st	Z, r18
				//putCharUSART(data[uart_cnt-5]); //TRANSMIT CURRENT DATA-CHAR
				uart_cnt++;
     7ee:	20 91 41 0a 	lds	r18, 0x0A41	; 0x800a41 <uart_cnt>
     7f2:	30 91 42 0a 	lds	r19, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     7f6:	2f 5f       	subi	r18, 0xFF	; 255
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     7fe:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
				break;
     802:	0b c0       	rjmp	.+22     	; 0x81a <evaluate_recieve+0x168>
		state = ReadData;
		break;
		
		case ReadData:
		if(Len>7){
			while(uart_cnt < (compare)){
     804:	20 91 41 0a 	lds	r18, 0x0A41	; 0x800a41 <uart_cnt>
     808:	30 91 42 0a 	lds	r19, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     80c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <compare>
     810:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <compare+0x1>
     814:	28 17       	cp	r18, r24
     816:	39 07       	cpc	r19, r25
     818:	e0 f2       	brcs	.-72     	; 0x7d2 <evaluate_recieve+0x120>
				//putCharUSART(data[uart_cnt-5]); //TRANSMIT CURRENT DATA-CHAR
				uart_cnt++;
				break;
				}
				
			if(uart_cnt==(compare)){
     81a:	20 91 41 0a 	lds	r18, 0x0A41	; 0x800a41 <uart_cnt>
     81e:	30 91 42 0a 	lds	r19, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     822:	82 17       	cp	r24, r18
     824:	93 07       	cpc	r25, r19
     826:	09 f0       	breq	.+2      	; 0x82a <evaluate_recieve+0x178>
     828:	70 c0       	rjmp	.+224    	; 0x90a <evaluate_recieve+0x258>
				/*putCharUSART(test);*/
				state = CS1;
     82a:	87 e0       	ldi	r24, 0x07	; 7
     82c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
				uart_cnt++;
     830:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     834:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	90 93 42 0a 	sts	0x0A42, r25	; 0x800a42 <uart_cnt+0x1>
     83e:	80 93 41 0a 	sts	0x0A41, r24	; 0x800a41 <uart_cnt>
     842:	08 95       	ret
		}
		break;
		
		case CS1:
		/*putCharUSART(test2);*/
		checksum_val = (UARTBuffer[uart_cnt++]<<8);
     844:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     848:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     84c:	9c 01       	movw	r18, r24
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     856:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     85a:	fc 01       	movw	r30, r24
     85c:	ee 5a       	subi	r30, 0xAE	; 174
     85e:	f9 4f       	sbci	r31, 0xF9	; 249
     860:	80 81       	ld	r24, Z
     862:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <checksum_val>
     866:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <checksum_val+0x1>
// 		putCharUSART(test2);
// 		putCharUSART(checksum_val);
// 		putCharUSART(UARTBuffer[uart_cnt]);
		state = CS2;
     86a:	88 e0       	ldi	r24, 0x08	; 8
     86c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <state>
		/*putCharUSART(test2);*/
		break;
     870:	08 95       	ret
		
		case CS2:
		/*putCharUSART();test2*/
		checksum_val = checksum_val + (UARTBuffer[uart_cnt++]);
     872:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <uart_cnt>
     876:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     87a:	9c 01       	movw	r18, r24
     87c:	2f 5f       	subi	r18, 0xFF	; 255
     87e:	3f 4f       	sbci	r19, 0xFF	; 255
     880:	30 93 42 0a 	sts	0x0A42, r19	; 0x800a42 <uart_cnt+0x1>
     884:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <uart_cnt>
     888:	fc 01       	movw	r30, r24
     88a:	ee 5a       	subi	r30, 0xAE	; 174
     88c:	f9 4f       	sbci	r31, 0xF9	; 249
     88e:	20 81       	ld	r18, Z
     890:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <checksum_val>
     894:	90 91 4e 06 	lds	r25, 0x064E	; 0x80064e <checksum_val+0x1>
     898:	82 0f       	add	r24, r18
     89a:	91 1d       	adc	r25, r1
     89c:	90 93 4e 06 	sts	0x064E, r25	; 0x80064e <checksum_val+0x1>
     8a0:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <checksum_val>
		if(checksum_val==0x0000){
     8a4:	89 2b       	or	r24, r25
     8a6:	d1 f4       	brne	.+52     	; 0x8dc <evaluate_recieve+0x22a>
			rec_complete=1;	
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <rec_complete>
			uart_cnt=0;
     8ae:	10 92 42 0a 	sts	0x0A42, r1	; 0x800a42 <uart_cnt+0x1>
     8b2:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <uart_cnt>
			state = sync1;
     8b6:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <state>
			checksum_flag=0;
     8ba:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <checksum_flag>
			Len=0;
     8be:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <Len+0x1>
     8c2:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <Len>
			/*transmitStrUSART(data);*/
			memset(UARTBuffer,0,datasize);
     8c6:	8f ee       	ldi	r24, 0xEF	; 239
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	e2 e5       	ldi	r30, 0x52	; 82
     8cc:	f6 e0       	ldi	r31, 0x06	; 6
     8ce:	df 01       	movw	r26, r30
     8d0:	9c 01       	movw	r18, r24
     8d2:	1d 92       	st	X+, r1
     8d4:	21 50       	subi	r18, 0x01	; 1
     8d6:	30 40       	sbci	r19, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <evaluate_recieve+0x220>
     8da:	08 95       	ret
			}	
		else{
			checksum_flag=1;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <checksum_flag>
			uart_cnt=0;
     8e2:	10 92 42 0a 	sts	0x0A42, r1	; 0x800a42 <uart_cnt+0x1>
     8e6:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <uart_cnt>
			memset(UARTBuffer,0,datasize);
     8ea:	8f ee       	ldi	r24, 0xEF	; 239
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	e2 e5       	ldi	r30, 0x52	; 82
     8f0:	f6 e0       	ldi	r31, 0x06	; 6
     8f2:	df 01       	movw	r26, r30
     8f4:	9c 01       	movw	r18, r24
     8f6:	1d 92       	st	X+, r1
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	30 40       	sbci	r19, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <evaluate_recieve+0x244>
			state = sync1;
     8fe:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <state>
			Len=0;
     902:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <Len+0x1>
     906:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <Len>
     90a:	08 95       	ret

0000090c <toggle_stop>:
		break;
	}		
}
	
void toggle_stop(){
	if(stop == 0x03){
     90c:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <stop>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	19 f4       	brne	.+6      	; 0x91a <toggle_stop+0xe>
		stop = 0x02;
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <stop>
     91a:	08 95       	ret

0000091c <handle_generator>:
	}
}

void handle_generator(){
	BTN = data[0];
     91c:	ec e5       	ldi	r30, 0x5C	; 92
     91e:	f2 e0       	ldi	r31, 0x02	; 2
     920:	90 81       	ld	r25, Z
     922:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <BTN>
	SW = data[1];
     926:	81 81       	ldd	r24, Z+1	; 0x01
     928:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <SW>
	
	switch(BTN)
     92c:	91 30       	cpi	r25, 0x01	; 1
     92e:	b9 f1       	breq	.+110    	; 0x99e <handle_generator+0x82>
     930:	38 f0       	brcs	.+14     	; 0x940 <handle_generator+0x24>
     932:	92 30       	cpi	r25, 0x02	; 2
     934:	09 f4       	brne	.+2      	; 0x938 <handle_generator+0x1c>
     936:	4c c0       	rjmp	.+152    	; 0x9d0 <handle_generator+0xb4>
     938:	93 30       	cpi	r25, 0x03	; 3
     93a:	09 f4       	brne	.+2      	; 0x93e <handle_generator+0x22>
     93c:	51 c0       	rjmp	.+162    	; 0x9e0 <handle_generator+0xc4>
     93e:	08 95       	ret
	{
		case 0x00: //Enter
			if (param == shape_s){
     940:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <param>
     944:	91 11       	cpse	r25, r1
     946:	08 c0       	rjmp	.+16     	; 0x958 <handle_generator+0x3c>
				telecommand[1] = SW;
     948:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <telecommand+0x1>
				spi_package[0]=4;
     94c:	e6 e3       	ldi	r30, 0x36	; 54
     94e:	f2 e0       	ldi	r31, 0x02	; 2
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	90 83       	st	Z, r25
				spi_package[1]=SW;	
     954:	81 83       	std	Z+1, r24	; 0x01
				putCharUSART(SW);
     956:	8b d1       	rcall	.+790    	; 0xc6e <putCharUSART>
				//transmitStrUSART("shape_s");
			}
			if (param == freq_s){
     958:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <param>
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	69 f4       	brne	.+26     	; 0x97a <handle_generator+0x5e>
				telecommand[3] = SW;	
     960:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <SW>
     964:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <telecommand+0x3>
				spi_package[0]=7;
     968:	e6 e3       	ldi	r30, 0x36	; 54
     96a:	f2 e0       	ldi	r31, 0x02	; 2
     96c:	97 e0       	ldi	r25, 0x07	; 7
     96e:	90 83       	st	Z, r25
				spi_package[1]=SW;
				/*putCharUSART(spi_package[1]);*/
				putCharUSART(SW);
     970:	81 83       	std	Z+1, r24	; 0x01
     972:	7d d1       	rcall	.+762    	; 0xc6e <putCharUSART>
				transmitStrUSART("freq");
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	81 d1       	rcall	.+770    	; 0xc7c <transmitStrUSART>
			}
			if (param == amplitude_s){
     97a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <param>
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	09 f0       	breq	.+2      	; 0x984 <handle_generator+0x68>
     982:	40 c0       	rjmp	.+128    	; 0xa04 <handle_generator+0xe8>
				telecommand[2] = SW;
     984:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <SW>
     988:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <telecommand+0x2>
				spi_package[0]=5;
     98c:	e6 e3       	ldi	r30, 0x36	; 54
     98e:	f2 e0       	ldi	r31, 0x02	; 2
     990:	95 e0       	ldi	r25, 0x05	; 5
     992:	90 83       	st	Z, r25
				spi_package[1]=SW;
				transmitStrUSART("amplitude");
     994:	81 83       	std	Z+1, r24	; 0x01
     996:	87 e0       	ldi	r24, 0x07	; 7
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	70 c1       	rjmp	.+736    	; 0xc7c <transmitStrUSART>
     99c:	08 95       	ret
			//Transmit SPI_package;
			//transmit Generator DATA UART
		break;
		
		case 0x01: //Select
			switch(param){
     99e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <param>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	51 f0       	breq	.+20     	; 0x9ba <handle_generator+0x9e>
     9a6:	18 f0       	brcs	.+6      	; 0x9ae <handle_generator+0x92>
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	69 f0       	breq	.+26     	; 0x9c6 <handle_generator+0xaa>
     9ac:	08 95       	ret
				case shape_s:
				
				telecommand[0]=1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <telecommand>
				//transmit Generator DATA UART	
				param = amplitude_s;
     9b4:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <param>
				break;
     9b8:	08 95       	ret
				
				case amplitude_s:
				telecommand[0]=2;
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <telecommand>
				//transmit_generator
				param = freq_s;
     9c0:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <param>
				break;
     9c4:	08 95       	ret
				
				case freq_s:
				telecommand[0] = 0;
     9c6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <telecommand>
				//transmit_generator
				param = shape_s;
     9ca:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <param>
				break;
			}
			break;
			
		case 0x02: //run/stop
			toggle_stop();
     9ce:	08 95       	ret
     9d0:	9d df       	rcall	.-198    	; 0x90c <toggle_stop>
			spi_package[0] = stop;
     9d2:	e6 e3       	ldi	r30, 0x36	; 54
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <stop>
     9da:	80 83       	st	Z, r24
			spi_package[1] = 0;
     9dc:	11 82       	std	Z+1, r1	; 0x01
			//send stop-byte on SPI
			break;
     9de:	08 95       	ret
		
		case 0x03:
			if(reset == 0x01){
     9e0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <reset>
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	39 f4       	brne	.+14     	; 0x9f6 <handle_generator+0xda>
				reset = 0;
     9e8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <reset>
				spi_package[0] = reset;
     9ec:	e6 e3       	ldi	r30, 0x36	; 54
     9ee:	f2 e0       	ldi	r31, 0x02	; 2
     9f0:	10 82       	st	Z, r1
				spi_package[1] = 0;
     9f2:	11 82       	std	Z+1, r1	; 0x01
     9f4:	08 95       	ret
				//send reset_byte + 0data SPI;
			}
			else{
				reset = 0x01;	
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <reset>
				spi_package[0] = reset;
     9fc:	e6 e3       	ldi	r30, 0x36	; 54
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	80 83       	st	Z, r24
				spi_package[1] = 0;
     a02:	11 82       	std	Z+1, r1	; 0x01
     a04:	08 95       	ret

00000a06 <handle_type>:
}


enum tilstande handle_type(char input){
	/*putCharUSART(uart_type);*/
	if(uart_type==0x01){
     a06:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <uart_type>
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	29 f0       	breq	.+10     	; 0xa18 <handle_type+0x12>
		return set_gen;
	}
	if(uart_type==0x02){
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	29 f0       	breq	.+10     	; 0xa1c <handle_type+0x16>
		return set_sample;
	}
	if(uart_type==0x03){
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	29 f4       	brne	.+10     	; 0xa20 <handle_type+0x1a>
     a16:	08 95       	ret


enum tilstande handle_type(char input){
	/*putCharUSART(uart_type);*/
	if(uart_type==0x01){
		return set_gen;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	08 95       	ret
	}
	if(uart_type==0x02){
		return set_sample;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret
	}
	if(uart_type==0x03){
		return BodePlot;
	}
	else return scope;
     a20:	80 e0       	ldi	r24, 0x00	; 0
}
     a22:	08 95       	ret

00000a24 <debug_print>:


void debug_print(char input, int value){
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	c4 56       	subi	r28, 0x64	; 100
     a36:	d1 09       	sbc	r29, r1
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	7b 01       	movw	r14, r22
	char temp[100]={0};
     a44:	8e 01       	movw	r16, r28
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	94 e6       	ldi	r25, 0x64	; 100
     a4c:	f8 01       	movw	r30, r16
     a4e:	11 92       	st	Z+, r1
     a50:	9a 95       	dec	r25
     a52:	e9 f7       	brne	.-6      	; 0xa4e <debug_print+0x2a>
	sprintf(temp,"%u",input);
     a54:	1f 92       	push	r1
     a56:	8f 93       	push	r24
     a58:	81 e1       	ldi	r24, 0x11	; 17
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	1f 93       	push	r17
     a62:	0f 93       	push	r16
     a64:	1f d1       	rcall	.+574    	; 0xca4 <sprintf>
	sendStrXY(temp,value,13);
     a66:	4d e0       	ldi	r20, 0x0D	; 13
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	b7 01       	movw	r22, r14
     a6c:	c8 01       	movw	r24, r16
     a6e:	b2 dd       	rcall	.-1180   	; 0x5d4 <sendStrXY>
}
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	cc 59       	subi	r28, 0x9C	; 156
     a7e:	df 4f       	sbci	r29, 0xFF	; 255
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	08 95       	ret

00000a98 <main>:

int main(void)
{
	init_uart_interrupt(UBBR_D);
     a98:	80 e1       	ldi	r24, 0x10	; 16
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	d6 d0       	rcall	.+428    	; 0xc4a <init_uart_interrupt>
	_i2c_address = 0x78;
     a9e:	88 e7       	ldi	r24, 0x78	; 120
     aa0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_i2c_address>
	I2C_Init();
	InitializeDisplay();
     aa4:	c8 dc       	rcall	.-1648   	; 0x436 <I2C_Init>
     aa6:	30 dd       	rcall	.-1440   	; 0x508 <InitializeDisplay>
	print_fonts();
     aa8:	c3 dd       	rcall	.-1146   	; 0x630 <print_fonts>
     aaa:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aac:	83 ec       	ldi	r24, 0xC3	; 195
     aae:	99 e0       	ldi	r25, 0x09	; 9
     ab0:	21 50       	subi	r18, 0x01	; 1
     ab2:	80 40       	sbci	r24, 0x00	; 0
     ab4:	90 40       	sbci	r25, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <main+0x18>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <main+0x22>
     aba:	00 00       	nop
	_delay_ms(200);
	clear_display();
     abc:	77 dd       	rcall	.-1298   	; 0x5ac <clear_display>
     abe:	78 94       	sei
	sei();
     ac0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <tilstand>
	
    while (1){
	
	switch(tilstand){
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	91 f0       	breq	.+36     	; 0xaec <main+0x54>
     ac8:	28 f0       	brcs	.+10     	; 0xad4 <main+0x3c>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	a1 f1       	breq	.+104    	; 0xb36 <main+0x9e>
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	b1 f1       	breq	.+108    	; 0xb3e <main+0xa6>
     ad2:	2e c0       	rjmp	.+92     	; 0xb30 <main+0x98>
     ad4:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <flag_uart>
		
		case scope:
		if(flag_uart==1){
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	51 f5       	brne	.+84     	; 0xb30 <main+0x98>
			/*putCharUSART(test);*/
			flag_uart=0;
     adc:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <flag_uart>
			tilstand = handle_type(uart_type);
     ae0:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <uart_type>
     ae4:	90 df       	rcall	.-224    	; 0xa06 <handle_type>
     ae6:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <tilstand>
     aea:	22 c0       	rjmp	.+68     	; 0xb30 <main+0x98>
     aec:	cc e5       	ldi	r28, 0x5C	; 92
// 			tilstand = handle_type(current_type);
// 			}
		break;
		
		case set_sample:
		S_Rate = ((unsigned int)data[0]<<8)|(unsigned int)data[1];
     aee:	d2 e0       	ldi	r29, 0x02	; 2
     af0:	88 81       	ld	r24, Y
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	98 2f       	mov	r25, r24
     af6:	88 27       	eor	r24, r24
     af8:	29 81       	ldd	r18, Y+1	; 0x01
     afa:	82 2b       	or	r24, r18
     afc:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <S_Rate+0x1>
     b00:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <S_Rate>
 		putCharUSART(S_Rate>>8);
     b04:	89 2f       	mov	r24, r25
     b06:	b3 d0       	rcall	.+358    	; 0xc6e <putCharUSART>
 		putCharUSART(S_Rate);
     b08:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <S_Rate>
     b0c:	b0 d0       	rcall	.+352    	; 0xc6e <putCharUSART>
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
		RL = ((unsigned int)data[2]<<8)|(unsigned int)data[3];
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	98 2f       	mov	r25, r24
     b14:	88 27       	eor	r24, r24
     b16:	2b 81       	ldd	r18, Y+3	; 0x03
     b18:	82 2b       	or	r24, r18
     b1a:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <RL+0x1>
     b1e:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RL>
 		putCharUSART(RL>>8);
     b22:	89 2f       	mov	r24, r25
 		putCharUSART(RL);
     b24:	a4 d0       	rcall	.+328    	; 0xc6e <putCharUSART>
     b26:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RL>
     b2a:	a1 d0       	rcall	.+322    	; 0xc6e <putCharUSART>
		/*transmitStrUSART("Set_sample");*/
		tilstand = scope;		
     b2c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <tilstand>
		tilstand = scope;
		break;
		
		case BodePlot:
		spi_package[0]=7;
		for(int i = 0; i<=255;i++){//adjust frequency 1 hz pr step
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	21 c0       	rjmp	.+66     	; 0xb78 <main+0xe0>
		/*transmitStrUSART("Set_sample");*/
		tilstand = scope;		
		break;
		
		case set_gen:
		handle_generator();
     b36:	f2 de       	rcall	.-540    	; 0x91c <handle_generator>
     b38:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <tilstand>
		tilstand = scope;
     b3c:	f9 cf       	rjmp	.-14     	; 0xb30 <main+0x98>
		break;
		
		case BodePlot:
		spi_package[0]=7;
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
		for(int i = 0; i<=255;i++){//adjust frequency 1 hz pr step
     b44:	c0 e0       	ldi	r28, 0x00	; 0
     b46:	d0 e0       	ldi	r29, 0x00	; 0
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <main+0xbe>
			spi_package[1]=i;
     b4a:	c0 93 37 02 	sts	0x0237, r28	; 0x800237 <__data_end+0x1>
			putCharUSART(test);
     b4e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     b52:	8d d0       	rcall	.+282    	; 0xc6e <putCharUSART>
     b54:	21 96       	adiw	r28, 0x01	; 1
		tilstand = scope;
		break;
		
		case BodePlot:
		spi_package[0]=7;
		for(int i = 0; i<=255;i++){//adjust frequency 1 hz pr step
     b56:	cf 3f       	cpi	r28, 0xFF	; 255
     b58:	d1 05       	cpc	r29, r1
     b5a:	b9 f3       	breq	.-18     	; 0xb4a <main+0xb2>
     b5c:	b4 f3       	brlt	.-20     	; 0xb4a <main+0xb2>
     b5e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <tilstand>
			spi_package[1]=i;
			putCharUSART(test);
			//send SPI package
		}
		//Transmit UART datapackage
		tilstand = scope;
     b62:	e6 cf       	rjmp	.-52     	; 0xb30 <main+0x98>
		//set freq
		//loop for 256 samples - record_length = 263
		
		break;
     b64:	fc 01       	movw	r30, r24
	}
		
		
		
		for(int i=0;i<10;i++){
			OLED_buffer[i]=data[i]+0x30;
     b66:	e4 5a       	subi	r30, 0xA4	; 164
     b68:	fd 4f       	sbci	r31, 0xFD	; 253
     b6a:	20 81       	ld	r18, Z
     b6c:	fc 01       	movw	r30, r24
     b6e:	eb 5b       	subi	r30, 0xBB	; 187
     b70:	fd 4f       	sbci	r31, 0xFD	; 253
     b72:	20 5d       	subi	r18, 0xD0	; 208
     b74:	20 83       	st	Z, r18
		break;
	}
		
		
		
		for(int i=0;i<10;i++){
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	8a 30       	cpi	r24, 0x0A	; 10
     b7a:	91 05       	cpc	r25, r1
			OLED_buffer[i]=data[i]+0x30;
		}		
		sendStrXY(OLED_buffer,4,5);
     b7c:	9c f3       	brlt	.-26     	; 0xb64 <main+0xcc>
     b7e:	45 e0       	ldi	r20, 0x05	; 5
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	64 e0       	ldi	r22, 0x04	; 4
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	85 e4       	ldi	r24, 0x45	; 69
     b88:	92 e0       	ldi	r25, 0x02	; 2
		debug_print(uart_type,5);
     b8a:	24 dd       	rcall	.-1464   	; 0x5d4 <sendStrXY>
     b8c:	65 e0       	ldi	r22, 0x05	; 5
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <uart_type>
		debug_print(rec_complete,6);
     b94:	47 df       	rcall	.-370    	; 0xa24 <debug_print>
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <rec_complete>
		debug_print(checksum_flag,7);
     b9e:	42 df       	rcall	.-380    	; 0xa24 <debug_print>
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <checksum_flag>
		sendStrXY("Data:",4,0);
     ba8:	3d df       	rcall	.-390    	; 0xa24 <debug_print>
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	64 e0       	ldi	r22, 0x04	; 4
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	84 e1       	ldi	r24, 0x14	; 20
     bb4:	92 e0       	ldi	r25, 0x02	; 2
 		sendStrXY("Type:",5,0);
     bb6:	0e dd       	rcall	.-1508   	; 0x5d4 <sendStrXY>
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	65 e0       	ldi	r22, 0x05	; 5
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	8a e1       	ldi	r24, 0x1A	; 26
     bc2:	92 e0       	ldi	r25, 0x02	; 2
 		sendStrXY("Rec_comp:",6,0);
     bc4:	07 dd       	rcall	.-1522   	; 0x5d4 <sendStrXY>
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	66 e0       	ldi	r22, 0x06	; 6
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	00 dd       	rcall	.-1536   	; 0x5d4 <sendStrXY>
 		sendStrXY("Checksum_f:",7,0);
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	67 e0       	ldi	r22, 0x07	; 7
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	8a e2       	ldi	r24, 0x2A	; 42
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	f9 dc       	rcall	.-1550   	; 0x5d4 <sendStrXY>
     be2:	6e cf       	rjmp	.-292    	; 0xac0 <main+0x28>

00000be4 <__vector_25>:

		
		
	
}
     be4:	1f 92       	push	r1




//Service routine for UART receive vector
ISR(USART0_RX_vect){
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	0b b6       	in	r0, 0x3b	; 59
     bf0:	0f 92       	push	r0
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
	UARTBuffer[uart_cnt] = UDR0;
     c0a:	e0 91 41 0a 	lds	r30, 0x0A41	; 0x800a41 <uart_cnt>
     c0e:	f0 91 42 0a 	lds	r31, 0x0A42	; 0x800a42 <uart_cnt+0x1>
     c12:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     c16:	ee 5a       	subi	r30, 0xAE	; 174
     c18:	f9 4f       	sbci	r31, 0xF9	; 249
     c1a:	80 83       	st	Z, r24
	flag_uart = 1; 
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <flag_uart>
	evaluate_recieve();
     c22:	47 dd       	rcall	.-1394   	; 0x6b2 <evaluate_recieve>
 }
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	0f 90       	pop	r0
     c3e:	0b be       	out	0x3b, r0	; 59
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <init_uart_interrupt>:

//Transmits 8-bit(usart1)
void putCharUSART1(char tx){
	
	while(!(UCSR1A & (1<<UDRE1))); //continues when transmit buffer is empty
	UDR1 = tx;
     c4a:	22 e0       	ldi	r18, 0x02	; 2
     c4c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     c50:	e1 ec       	ldi	r30, 0xC1	; 193
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	20 81       	ld	r18, Z
     c56:	28 69       	ori	r18, 0x98	; 152
     c58:	20 83       	st	Z, r18
     c5a:	e2 ec       	ldi	r30, 0xC2	; 194
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	20 81       	ld	r18, Z
     c60:	26 60       	ori	r18, 0x06	; 6
     c62:	20 83       	st	Z, r18
     c64:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
     c68:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
     c6c:	08 95       	ret

00000c6e <putCharUSART>:
     c6e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     c72:	95 ff       	sbrs	r25, 5
     c74:	fc cf       	rjmp	.-8      	; 0xc6e <putCharUSART>
     c76:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     c7a:	08 95       	ret

00000c7c <transmitStrUSART>:
}


//Transmits string
//Argument: array with data
void transmitStrUSART(char * ptr){
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
	
	while(*ptr){
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <transmitStrUSART+0xc>
		putCharUSART(*ptr);
     c84:	f4 df       	rcall	.-24     	; 0xc6e <putCharUSART>
		ptr ++; 
     c86:	21 96       	adiw	r28, 0x01	; 1

//Transmits string
//Argument: array with data
void transmitStrUSART(char * ptr){
	
	while(*ptr){
     c88:	88 81       	ld	r24, Y
     c8a:	81 11       	cpse	r24, r1
     c8c:	fb cf       	rjmp	.-10     	; 0xc84 <transmitStrUSART+0x8>
		putCharUSART(*ptr);
		ptr ++; 
	}
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <__tablejump2__>:
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	88 1f       	adc	r24, r24
     c9a:	8b bf       	out	0x3b, r24	; 59
     c9c:	07 90       	elpm	r0, Z+
     c9e:	f6 91       	elpm	r31, Z
     ca0:	e0 2d       	mov	r30, r0
     ca2:	19 94       	eijmp

00000ca4 <sprintf>:
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	2e 97       	sbiw	r28, 0x0e	; 14
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	0e 89       	ldd	r16, Y+22	; 0x16
     cbe:	1f 89       	ldd	r17, Y+23	; 0x17
     cc0:	86 e0       	ldi	r24, 0x06	; 6
     cc2:	8c 83       	std	Y+4, r24	; 0x04
     cc4:	1a 83       	std	Y+2, r17	; 0x02
     cc6:	09 83       	std	Y+1, r16	; 0x01
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f e7       	ldi	r25, 0x7F	; 127
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	ae 01       	movw	r20, r28
     cd2:	46 5e       	subi	r20, 0xE6	; 230
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	68 8d       	ldd	r22, Y+24	; 0x18
     cd8:	79 8d       	ldd	r23, Y+25	; 0x19
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	10 d0       	rcall	.+32     	; 0xd00 <vfprintf>
     ce0:	ef 81       	ldd	r30, Y+7	; 0x07
     ce2:	f8 85       	ldd	r31, Y+8	; 0x08
     ce4:	e0 0f       	add	r30, r16
     ce6:	f1 1f       	adc	r31, r17
     ce8:	10 82       	st	Z, r1
     cea:	2e 96       	adiw	r28, 0x0e	; 14
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <vfprintf>:
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2b 97       	sbiw	r28, 0x0b	; 11
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	6c 01       	movw	r12, r24
     d36:	7b 01       	movw	r14, r22
     d38:	8a 01       	movw	r16, r20
     d3a:	fc 01       	movw	r30, r24
     d3c:	17 82       	std	Z+7, r1	; 0x07
     d3e:	16 82       	std	Z+6, r1	; 0x06
     d40:	83 81       	ldd	r24, Z+3	; 0x03
     d42:	81 ff       	sbrs	r24, 1
     d44:	bf c1       	rjmp	.+894    	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	3c 01       	movw	r6, r24
     d4c:	f6 01       	movw	r30, r12
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	f7 01       	movw	r30, r14
     d52:	93 fd       	sbrc	r25, 3
     d54:	85 91       	lpm	r24, Z+
     d56:	93 ff       	sbrs	r25, 3
     d58:	81 91       	ld	r24, Z+
     d5a:	7f 01       	movw	r14, r30
     d5c:	88 23       	and	r24, r24
     d5e:	09 f4       	brne	.+2      	; 0xd62 <vfprintf+0x62>
     d60:	ad c1       	rjmp	.+858    	; 0x10bc <__EEPROM_REGION_LENGTH__+0xbc>
     d62:	85 32       	cpi	r24, 0x25	; 37
     d64:	39 f4       	brne	.+14     	; 0xd74 <vfprintf+0x74>
     d66:	93 fd       	sbrc	r25, 3
     d68:	85 91       	lpm	r24, Z+
     d6a:	93 ff       	sbrs	r25, 3
     d6c:	81 91       	ld	r24, Z+
     d6e:	7f 01       	movw	r14, r30
     d70:	85 32       	cpi	r24, 0x25	; 37
     d72:	21 f4       	brne	.+8      	; 0xd7c <vfprintf+0x7c>
     d74:	b6 01       	movw	r22, r12
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	d6 d1       	rcall	.+940    	; 0x1126 <fputc>
     d7a:	e8 cf       	rjmp	.-48     	; 0xd4c <vfprintf+0x4c>
     d7c:	91 2c       	mov	r9, r1
     d7e:	21 2c       	mov	r2, r1
     d80:	31 2c       	mov	r3, r1
     d82:	ff e1       	ldi	r31, 0x1F	; 31
     d84:	f3 15       	cp	r31, r3
     d86:	d8 f0       	brcs	.+54     	; 0xdbe <vfprintf+0xbe>
     d88:	8b 32       	cpi	r24, 0x2B	; 43
     d8a:	79 f0       	breq	.+30     	; 0xdaa <vfprintf+0xaa>
     d8c:	38 f4       	brcc	.+14     	; 0xd9c <vfprintf+0x9c>
     d8e:	80 32       	cpi	r24, 0x20	; 32
     d90:	79 f0       	breq	.+30     	; 0xdb0 <vfprintf+0xb0>
     d92:	83 32       	cpi	r24, 0x23	; 35
     d94:	a1 f4       	brne	.+40     	; 0xdbe <vfprintf+0xbe>
     d96:	23 2d       	mov	r18, r3
     d98:	20 61       	ori	r18, 0x10	; 16
     d9a:	1d c0       	rjmp	.+58     	; 0xdd6 <vfprintf+0xd6>
     d9c:	8d 32       	cpi	r24, 0x2D	; 45
     d9e:	61 f0       	breq	.+24     	; 0xdb8 <vfprintf+0xb8>
     da0:	80 33       	cpi	r24, 0x30	; 48
     da2:	69 f4       	brne	.+26     	; 0xdbe <vfprintf+0xbe>
     da4:	23 2d       	mov	r18, r3
     da6:	21 60       	ori	r18, 0x01	; 1
     da8:	16 c0       	rjmp	.+44     	; 0xdd6 <vfprintf+0xd6>
     daa:	83 2d       	mov	r24, r3
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	38 2e       	mov	r3, r24
     db0:	e3 2d       	mov	r30, r3
     db2:	e4 60       	ori	r30, 0x04	; 4
     db4:	3e 2e       	mov	r3, r30
     db6:	2a c0       	rjmp	.+84     	; 0xe0c <vfprintf+0x10c>
     db8:	f3 2d       	mov	r31, r3
     dba:	f8 60       	ori	r31, 0x08	; 8
     dbc:	1d c0       	rjmp	.+58     	; 0xdf8 <vfprintf+0xf8>
     dbe:	37 fc       	sbrc	r3, 7
     dc0:	2d c0       	rjmp	.+90     	; 0xe1c <vfprintf+0x11c>
     dc2:	20 ed       	ldi	r18, 0xD0	; 208
     dc4:	28 0f       	add	r18, r24
     dc6:	2a 30       	cpi	r18, 0x0A	; 10
     dc8:	40 f0       	brcs	.+16     	; 0xdda <vfprintf+0xda>
     dca:	8e 32       	cpi	r24, 0x2E	; 46
     dcc:	b9 f4       	brne	.+46     	; 0xdfc <vfprintf+0xfc>
     dce:	36 fc       	sbrc	r3, 6
     dd0:	75 c1       	rjmp	.+746    	; 0x10bc <__EEPROM_REGION_LENGTH__+0xbc>
     dd2:	23 2d       	mov	r18, r3
     dd4:	20 64       	ori	r18, 0x40	; 64
     dd6:	32 2e       	mov	r3, r18
     dd8:	19 c0       	rjmp	.+50     	; 0xe0c <vfprintf+0x10c>
     dda:	36 fe       	sbrs	r3, 6
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <vfprintf+0xea>
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	98 9e       	mul	r9, r24
     de2:	20 0d       	add	r18, r0
     de4:	11 24       	eor	r1, r1
     de6:	92 2e       	mov	r9, r18
     de8:	11 c0       	rjmp	.+34     	; 0xe0c <vfprintf+0x10c>
     dea:	ea e0       	ldi	r30, 0x0A	; 10
     dec:	2e 9e       	mul	r2, r30
     dee:	20 0d       	add	r18, r0
     df0:	11 24       	eor	r1, r1
     df2:	22 2e       	mov	r2, r18
     df4:	f3 2d       	mov	r31, r3
     df6:	f0 62       	ori	r31, 0x20	; 32
     df8:	3f 2e       	mov	r3, r31
     dfa:	08 c0       	rjmp	.+16     	; 0xe0c <vfprintf+0x10c>
     dfc:	8c 36       	cpi	r24, 0x6C	; 108
     dfe:	21 f4       	brne	.+8      	; 0xe08 <vfprintf+0x108>
     e00:	83 2d       	mov	r24, r3
     e02:	80 68       	ori	r24, 0x80	; 128
     e04:	38 2e       	mov	r3, r24
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x10c>
     e08:	88 36       	cpi	r24, 0x68	; 104
     e0a:	41 f4       	brne	.+16     	; 0xe1c <vfprintf+0x11c>
     e0c:	f7 01       	movw	r30, r14
     e0e:	93 fd       	sbrc	r25, 3
     e10:	85 91       	lpm	r24, Z+
     e12:	93 ff       	sbrs	r25, 3
     e14:	81 91       	ld	r24, Z+
     e16:	7f 01       	movw	r14, r30
     e18:	81 11       	cpse	r24, r1
     e1a:	b3 cf       	rjmp	.-154    	; 0xd82 <vfprintf+0x82>
     e1c:	98 2f       	mov	r25, r24
     e1e:	9f 7d       	andi	r25, 0xDF	; 223
     e20:	95 54       	subi	r25, 0x45	; 69
     e22:	93 30       	cpi	r25, 0x03	; 3
     e24:	28 f4       	brcc	.+10     	; 0xe30 <vfprintf+0x130>
     e26:	0c 5f       	subi	r16, 0xFC	; 252
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	9f e3       	ldi	r25, 0x3F	; 63
     e2c:	99 83       	std	Y+1, r25	; 0x01
     e2e:	0d c0       	rjmp	.+26     	; 0xe4a <vfprintf+0x14a>
     e30:	83 36       	cpi	r24, 0x63	; 99
     e32:	31 f0       	breq	.+12     	; 0xe40 <vfprintf+0x140>
     e34:	83 37       	cpi	r24, 0x73	; 115
     e36:	71 f0       	breq	.+28     	; 0xe54 <vfprintf+0x154>
     e38:	83 35       	cpi	r24, 0x53	; 83
     e3a:	09 f0       	breq	.+2      	; 0xe3e <vfprintf+0x13e>
     e3c:	55 c0       	rjmp	.+170    	; 0xee8 <vfprintf+0x1e8>
     e3e:	20 c0       	rjmp	.+64     	; 0xe80 <vfprintf+0x180>
     e40:	f8 01       	movw	r30, r16
     e42:	80 81       	ld	r24, Z
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	0e 5f       	subi	r16, 0xFE	; 254
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
     e4a:	88 24       	eor	r8, r8
     e4c:	83 94       	inc	r8
     e4e:	91 2c       	mov	r9, r1
     e50:	53 01       	movw	r10, r6
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <vfprintf+0x178>
     e54:	28 01       	movw	r4, r16
     e56:	f2 e0       	ldi	r31, 0x02	; 2
     e58:	4f 0e       	add	r4, r31
     e5a:	51 1c       	adc	r5, r1
     e5c:	f8 01       	movw	r30, r16
     e5e:	a0 80       	ld	r10, Z
     e60:	b1 80       	ldd	r11, Z+1	; 0x01
     e62:	36 fe       	sbrs	r3, 6
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <vfprintf+0x16c>
     e66:	69 2d       	mov	r22, r9
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x170>
     e6c:	6f ef       	ldi	r22, 0xFF	; 255
     e6e:	7f ef       	ldi	r23, 0xFF	; 255
     e70:	c5 01       	movw	r24, r10
     e72:	4e d1       	rcall	.+668    	; 0x1110 <strnlen>
     e74:	4c 01       	movw	r8, r24
     e76:	82 01       	movw	r16, r4
     e78:	f3 2d       	mov	r31, r3
     e7a:	ff 77       	andi	r31, 0x7F	; 127
     e7c:	3f 2e       	mov	r3, r31
     e7e:	15 c0       	rjmp	.+42     	; 0xeaa <vfprintf+0x1aa>
     e80:	28 01       	movw	r4, r16
     e82:	22 e0       	ldi	r18, 0x02	; 2
     e84:	42 0e       	add	r4, r18
     e86:	51 1c       	adc	r5, r1
     e88:	f8 01       	movw	r30, r16
     e8a:	a0 80       	ld	r10, Z
     e8c:	b1 80       	ldd	r11, Z+1	; 0x01
     e8e:	36 fe       	sbrs	r3, 6
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <vfprintf+0x198>
     e92:	69 2d       	mov	r22, r9
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <vfprintf+0x19c>
     e98:	6f ef       	ldi	r22, 0xFF	; 255
     e9a:	7f ef       	ldi	r23, 0xFF	; 255
     e9c:	c5 01       	movw	r24, r10
     e9e:	2d d1       	rcall	.+602    	; 0x10fa <strnlen_P>
     ea0:	4c 01       	movw	r8, r24
     ea2:	f3 2d       	mov	r31, r3
     ea4:	f0 68       	ori	r31, 0x80	; 128
     ea6:	3f 2e       	mov	r3, r31
     ea8:	82 01       	movw	r16, r4
     eaa:	33 fc       	sbrc	r3, 3
     eac:	19 c0       	rjmp	.+50     	; 0xee0 <vfprintf+0x1e0>
     eae:	82 2d       	mov	r24, r2
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	88 16       	cp	r8, r24
     eb4:	99 06       	cpc	r9, r25
     eb6:	a0 f4       	brcc	.+40     	; 0xee0 <vfprintf+0x1e0>
     eb8:	b6 01       	movw	r22, r12
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	33 d1       	rcall	.+614    	; 0x1126 <fputc>
     ec0:	2a 94       	dec	r2
     ec2:	f5 cf       	rjmp	.-22     	; 0xeae <vfprintf+0x1ae>
     ec4:	f5 01       	movw	r30, r10
     ec6:	37 fc       	sbrc	r3, 7
     ec8:	85 91       	lpm	r24, Z+
     eca:	37 fe       	sbrs	r3, 7
     ecc:	81 91       	ld	r24, Z+
     ece:	5f 01       	movw	r10, r30
     ed0:	b6 01       	movw	r22, r12
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	28 d1       	rcall	.+592    	; 0x1126 <fputc>
     ed6:	21 10       	cpse	r2, r1
     ed8:	2a 94       	dec	r2
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	82 1a       	sub	r8, r18
     ede:	91 08       	sbc	r9, r1
     ee0:	81 14       	cp	r8, r1
     ee2:	91 04       	cpc	r9, r1
     ee4:	79 f7       	brne	.-34     	; 0xec4 <vfprintf+0x1c4>
     ee6:	e1 c0       	rjmp	.+450    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
     ee8:	84 36       	cpi	r24, 0x64	; 100
     eea:	11 f0       	breq	.+4      	; 0xef0 <vfprintf+0x1f0>
     eec:	89 36       	cpi	r24, 0x69	; 105
     eee:	39 f5       	brne	.+78     	; 0xf3e <vfprintf+0x23e>
     ef0:	f8 01       	movw	r30, r16
     ef2:	37 fe       	sbrs	r3, 7
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <vfprintf+0x204>
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	0c 5f       	subi	r16, 0xFC	; 252
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <vfprintf+0x214>
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	07 2e       	mov	r0, r23
     f0a:	00 0c       	add	r0, r0
     f0c:	88 0b       	sbc	r24, r24
     f0e:	99 0b       	sbc	r25, r25
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	f3 2d       	mov	r31, r3
     f16:	ff 76       	andi	r31, 0x6F	; 111
     f18:	3f 2e       	mov	r3, r31
     f1a:	97 ff       	sbrs	r25, 7
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <vfprintf+0x230>
     f1e:	90 95       	com	r25
     f20:	80 95       	com	r24
     f22:	70 95       	com	r23
     f24:	61 95       	neg	r22
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	f0 68       	ori	r31, 0x80	; 128
     f2e:	3f 2e       	mov	r3, r31
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	a3 01       	movw	r20, r6
     f36:	33 d1       	rcall	.+614    	; 0x119e <__ultoa_invert>
     f38:	88 2e       	mov	r8, r24
     f3a:	86 18       	sub	r8, r6
     f3c:	44 c0       	rjmp	.+136    	; 0xfc6 <vfprintf+0x2c6>
     f3e:	85 37       	cpi	r24, 0x75	; 117
     f40:	31 f4       	brne	.+12     	; 0xf4e <vfprintf+0x24e>
     f42:	23 2d       	mov	r18, r3
     f44:	2f 7e       	andi	r18, 0xEF	; 239
     f46:	b2 2e       	mov	r11, r18
     f48:	2a e0       	ldi	r18, 0x0A	; 10
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	25 c0       	rjmp	.+74     	; 0xf98 <vfprintf+0x298>
     f4e:	93 2d       	mov	r25, r3
     f50:	99 7f       	andi	r25, 0xF9	; 249
     f52:	b9 2e       	mov	r11, r25
     f54:	8f 36       	cpi	r24, 0x6F	; 111
     f56:	c1 f0       	breq	.+48     	; 0xf88 <vfprintf+0x288>
     f58:	18 f4       	brcc	.+6      	; 0xf60 <vfprintf+0x260>
     f5a:	88 35       	cpi	r24, 0x58	; 88
     f5c:	79 f0       	breq	.+30     	; 0xf7c <vfprintf+0x27c>
     f5e:	ae c0       	rjmp	.+348    	; 0x10bc <__EEPROM_REGION_LENGTH__+0xbc>
     f60:	80 37       	cpi	r24, 0x70	; 112
     f62:	19 f0       	breq	.+6      	; 0xf6a <vfprintf+0x26a>
     f64:	88 37       	cpi	r24, 0x78	; 120
     f66:	21 f0       	breq	.+8      	; 0xf70 <vfprintf+0x270>
     f68:	a9 c0       	rjmp	.+338    	; 0x10bc <__EEPROM_REGION_LENGTH__+0xbc>
     f6a:	e9 2f       	mov	r30, r25
     f6c:	e0 61       	ori	r30, 0x10	; 16
     f6e:	be 2e       	mov	r11, r30
     f70:	b4 fe       	sbrs	r11, 4
     f72:	0d c0       	rjmp	.+26     	; 0xf8e <vfprintf+0x28e>
     f74:	fb 2d       	mov	r31, r11
     f76:	f4 60       	ori	r31, 0x04	; 4
     f78:	bf 2e       	mov	r11, r31
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <vfprintf+0x28e>
     f7c:	34 fe       	sbrs	r3, 4
     f7e:	0a c0       	rjmp	.+20     	; 0xf94 <vfprintf+0x294>
     f80:	29 2f       	mov	r18, r25
     f82:	26 60       	ori	r18, 0x06	; 6
     f84:	b2 2e       	mov	r11, r18
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <vfprintf+0x294>
     f88:	28 e0       	ldi	r18, 0x08	; 8
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <vfprintf+0x298>
     f8e:	20 e1       	ldi	r18, 0x10	; 16
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <vfprintf+0x298>
     f94:	20 e1       	ldi	r18, 0x10	; 16
     f96:	32 e0       	ldi	r19, 0x02	; 2
     f98:	f8 01       	movw	r30, r16
     f9a:	b7 fe       	sbrs	r11, 7
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <vfprintf+0x2ac>
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	0c 5f       	subi	r16, 0xFC	; 252
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <vfprintf+0x2b8>
     fac:	60 81       	ld	r22, Z
     fae:	71 81       	ldd	r23, Z+1	; 0x01
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 5f       	subi	r16, 0xFE	; 254
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	a3 01       	movw	r20, r6
     fba:	f1 d0       	rcall	.+482    	; 0x119e <__ultoa_invert>
     fbc:	88 2e       	mov	r8, r24
     fbe:	86 18       	sub	r8, r6
     fc0:	fb 2d       	mov	r31, r11
     fc2:	ff 77       	andi	r31, 0x7F	; 127
     fc4:	3f 2e       	mov	r3, r31
     fc6:	36 fe       	sbrs	r3, 6
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <vfprintf+0x2e4>
     fca:	23 2d       	mov	r18, r3
     fcc:	2e 7f       	andi	r18, 0xFE	; 254
     fce:	a2 2e       	mov	r10, r18
     fd0:	89 14       	cp	r8, r9
     fd2:	58 f4       	brcc	.+22     	; 0xfea <vfprintf+0x2ea>
     fd4:	34 fe       	sbrs	r3, 4
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <vfprintf+0x2ee>
     fd8:	32 fc       	sbrc	r3, 2
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x2ee>
     fdc:	83 2d       	mov	r24, r3
     fde:	8e 7e       	andi	r24, 0xEE	; 238
     fe0:	a8 2e       	mov	r10, r24
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <vfprintf+0x2ee>
     fe4:	b8 2c       	mov	r11, r8
     fe6:	a3 2c       	mov	r10, r3
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <vfprintf+0x2f0>
     fea:	b8 2c       	mov	r11, r8
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <vfprintf+0x2f0>
     fee:	b9 2c       	mov	r11, r9
     ff0:	a4 fe       	sbrs	r10, 4
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     ff4:	fe 01       	movw	r30, r28
     ff6:	e8 0d       	add	r30, r8
     ff8:	f1 1d       	adc	r31, r1
     ffa:	80 81       	ld	r24, Z
     ffc:	80 33       	cpi	r24, 0x30	; 48
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1000:	9a 2d       	mov	r25, r10
    1002:	99 7e       	andi	r25, 0xE9	; 233
    1004:	a9 2e       	mov	r10, r25
    1006:	09 c0       	rjmp	.+18     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1008:	a2 fe       	sbrs	r10, 2
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100c:	b3 94       	inc	r11
    100e:	b3 94       	inc	r11
    1010:	04 c0       	rjmp	.+8      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1012:	8a 2d       	mov	r24, r10
    1014:	86 78       	andi	r24, 0x86	; 134
    1016:	09 f0       	breq	.+2      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1018:	b3 94       	inc	r11
    101a:	a3 fc       	sbrc	r10, 3
    101c:	10 c0       	rjmp	.+32     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    101e:	a0 fe       	sbrs	r10, 0
    1020:	06 c0       	rjmp	.+12     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1022:	b2 14       	cp	r11, r2
    1024:	80 f4       	brcc	.+32     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    1026:	28 0c       	add	r2, r8
    1028:	92 2c       	mov	r9, r2
    102a:	9b 18       	sub	r9, r11
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    102e:	b2 14       	cp	r11, r2
    1030:	58 f4       	brcc	.+22     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1032:	b6 01       	movw	r22, r12
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	76 d0       	rcall	.+236    	; 0x1126 <fputc>
    103a:	b3 94       	inc	r11
    103c:	f8 cf       	rjmp	.-16     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    103e:	b2 14       	cp	r11, r2
    1040:	18 f4       	brcc	.+6      	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1042:	2b 18       	sub	r2, r11
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1046:	98 2c       	mov	r9, r8
    1048:	21 2c       	mov	r2, r1
    104a:	a4 fe       	sbrs	r10, 4
    104c:	0f c0       	rjmp	.+30     	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
    104e:	b6 01       	movw	r22, r12
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	68 d0       	rcall	.+208    	; 0x1126 <fputc>
    1056:	a2 fe       	sbrs	r10, 2
    1058:	16 c0       	rjmp	.+44     	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    105a:	a1 fc       	sbrc	r10, 1
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    105e:	88 e7       	ldi	r24, 0x78	; 120
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1064:	88 e5       	ldi	r24, 0x58	; 88
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	b6 01       	movw	r22, r12
    106a:	0c c0       	rjmp	.+24     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    106c:	8a 2d       	mov	r24, r10
    106e:	86 78       	andi	r24, 0x86	; 134
    1070:	51 f0       	breq	.+20     	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    1072:	a1 fe       	sbrs	r10, 1
    1074:	02 c0       	rjmp	.+4      	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1076:	8b e2       	ldi	r24, 0x2B	; 43
    1078:	01 c0       	rjmp	.+2      	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
    107a:	80 e2       	ldi	r24, 0x20	; 32
    107c:	a7 fc       	sbrc	r10, 7
    107e:	8d e2       	ldi	r24, 0x2D	; 45
    1080:	b6 01       	movw	r22, r12
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	50 d0       	rcall	.+160    	; 0x1126 <fputc>
    1086:	89 14       	cp	r8, r9
    1088:	30 f4       	brcc	.+12     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    108a:	b6 01       	movw	r22, r12
    108c:	80 e3       	ldi	r24, 0x30	; 48
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	4a d0       	rcall	.+148    	; 0x1126 <fputc>
    1092:	9a 94       	dec	r9
    1094:	f8 cf       	rjmp	.-16     	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    1096:	8a 94       	dec	r8
    1098:	f3 01       	movw	r30, r6
    109a:	e8 0d       	add	r30, r8
    109c:	f1 1d       	adc	r31, r1
    109e:	80 81       	ld	r24, Z
    10a0:	b6 01       	movw	r22, r12
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	40 d0       	rcall	.+128    	; 0x1126 <fputc>
    10a6:	81 10       	cpse	r8, r1
    10a8:	f6 cf       	rjmp	.-20     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    10aa:	22 20       	and	r2, r2
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    10ae:	4e ce       	rjmp	.-868    	; 0xd4c <vfprintf+0x4c>
    10b0:	b6 01       	movw	r22, r12
    10b2:	80 e2       	ldi	r24, 0x20	; 32
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	37 d0       	rcall	.+110    	; 0x1126 <fputc>
    10b8:	2a 94       	dec	r2
    10ba:	f7 cf       	rjmp	.-18     	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
    10bc:	f6 01       	movw	r30, r12
    10be:	86 81       	ldd	r24, Z+6	; 0x06
    10c0:	97 81       	ldd	r25, Z+7	; 0x07
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <__EEPROM_REGION_LENGTH__+0xc8>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	9f ef       	ldi	r25, 0xFF	; 255
    10c8:	2b 96       	adiw	r28, 0x0b	; 11
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	bf 90       	pop	r11
    10e6:	af 90       	pop	r10
    10e8:	9f 90       	pop	r9
    10ea:	8f 90       	pop	r8
    10ec:	7f 90       	pop	r7
    10ee:	6f 90       	pop	r6
    10f0:	5f 90       	pop	r5
    10f2:	4f 90       	pop	r4
    10f4:	3f 90       	pop	r3
    10f6:	2f 90       	pop	r2
    10f8:	08 95       	ret

000010fa <strnlen_P>:
    10fa:	fc 01       	movw	r30, r24
    10fc:	05 90       	lpm	r0, Z+
    10fe:	61 50       	subi	r22, 0x01	; 1
    1100:	70 40       	sbci	r23, 0x00	; 0
    1102:	01 10       	cpse	r0, r1
    1104:	d8 f7       	brcc	.-10     	; 0x10fc <strnlen_P+0x2>
    1106:	80 95       	com	r24
    1108:	90 95       	com	r25
    110a:	8e 0f       	add	r24, r30
    110c:	9f 1f       	adc	r25, r31
    110e:	08 95       	ret

00001110 <strnlen>:
    1110:	fc 01       	movw	r30, r24
    1112:	61 50       	subi	r22, 0x01	; 1
    1114:	70 40       	sbci	r23, 0x00	; 0
    1116:	01 90       	ld	r0, Z+
    1118:	01 10       	cpse	r0, r1
    111a:	d8 f7       	brcc	.-10     	; 0x1112 <strnlen+0x2>
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	8e 0f       	add	r24, r30
    1122:	9f 1f       	adc	r25, r31
    1124:	08 95       	ret

00001126 <fputc>:
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	fb 01       	movw	r30, r22
    1130:	23 81       	ldd	r18, Z+3	; 0x03
    1132:	21 fd       	sbrc	r18, 1
    1134:	03 c0       	rjmp	.+6      	; 0x113c <fputc+0x16>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	2c c0       	rjmp	.+88     	; 0x1194 <fputc+0x6e>
    113c:	22 ff       	sbrs	r18, 2
    113e:	16 c0       	rjmp	.+44     	; 0x116c <fputc+0x46>
    1140:	46 81       	ldd	r20, Z+6	; 0x06
    1142:	57 81       	ldd	r21, Z+7	; 0x07
    1144:	24 81       	ldd	r18, Z+4	; 0x04
    1146:	35 81       	ldd	r19, Z+5	; 0x05
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	44 f4       	brge	.+16     	; 0x115e <fputc+0x38>
    114e:	a0 81       	ld	r26, Z
    1150:	b1 81       	ldd	r27, Z+1	; 0x01
    1152:	9d 01       	movw	r18, r26
    1154:	2f 5f       	subi	r18, 0xFF	; 255
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	31 83       	std	Z+1, r19	; 0x01
    115a:	20 83       	st	Z, r18
    115c:	8c 93       	st	X, r24
    115e:	26 81       	ldd	r18, Z+6	; 0x06
    1160:	37 81       	ldd	r19, Z+7	; 0x07
    1162:	2f 5f       	subi	r18, 0xFF	; 255
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	37 83       	std	Z+7, r19	; 0x07
    1168:	26 83       	std	Z+6, r18	; 0x06
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <fputc+0x6e>
    116c:	8b 01       	movw	r16, r22
    116e:	ec 01       	movw	r28, r24
    1170:	fb 01       	movw	r30, r22
    1172:	00 84       	ldd	r0, Z+8	; 0x08
    1174:	f1 85       	ldd	r31, Z+9	; 0x09
    1176:	e0 2d       	mov	r30, r0
    1178:	19 95       	eicall
    117a:	89 2b       	or	r24, r25
    117c:	e1 f6       	brne	.-72     	; 0x1136 <fputc+0x10>
    117e:	d8 01       	movw	r26, r16
    1180:	16 96       	adiw	r26, 0x06	; 6
    1182:	8d 91       	ld	r24, X+
    1184:	9c 91       	ld	r25, X
    1186:	17 97       	sbiw	r26, 0x07	; 7
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	17 96       	adiw	r26, 0x07	; 7
    118c:	9c 93       	st	X, r25
    118e:	8e 93       	st	-X, r24
    1190:	16 97       	sbiw	r26, 0x06	; 6
    1192:	ce 01       	movw	r24, r28
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <__ultoa_invert>:
    119e:	fa 01       	movw	r30, r20
    11a0:	aa 27       	eor	r26, r26
    11a2:	28 30       	cpi	r18, 0x08	; 8
    11a4:	51 f1       	breq	.+84     	; 0x11fa <__ultoa_invert+0x5c>
    11a6:	20 31       	cpi	r18, 0x10	; 16
    11a8:	81 f1       	breq	.+96     	; 0x120a <__ultoa_invert+0x6c>
    11aa:	e8 94       	clt
    11ac:	6f 93       	push	r22
    11ae:	6e 7f       	andi	r22, 0xFE	; 254
    11b0:	6e 5f       	subi	r22, 0xFE	; 254
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	af 4f       	sbci	r26, 0xFF	; 255
    11ba:	b1 e0       	ldi	r27, 0x01	; 1
    11bc:	3e d0       	rcall	.+124    	; 0x123a <__ultoa_invert+0x9c>
    11be:	b4 e0       	ldi	r27, 0x04	; 4
    11c0:	3c d0       	rcall	.+120    	; 0x123a <__ultoa_invert+0x9c>
    11c2:	67 0f       	add	r22, r23
    11c4:	78 1f       	adc	r23, r24
    11c6:	89 1f       	adc	r24, r25
    11c8:	9a 1f       	adc	r25, r26
    11ca:	a1 1d       	adc	r26, r1
    11cc:	68 0f       	add	r22, r24
    11ce:	79 1f       	adc	r23, r25
    11d0:	8a 1f       	adc	r24, r26
    11d2:	91 1d       	adc	r25, r1
    11d4:	a1 1d       	adc	r26, r1
    11d6:	6a 0f       	add	r22, r26
    11d8:	71 1d       	adc	r23, r1
    11da:	81 1d       	adc	r24, r1
    11dc:	91 1d       	adc	r25, r1
    11de:	a1 1d       	adc	r26, r1
    11e0:	20 d0       	rcall	.+64     	; 0x1222 <__ultoa_invert+0x84>
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <__ultoa_invert+0x48>
    11e4:	68 94       	set
    11e6:	3f 91       	pop	r19
    11e8:	2a e0       	ldi	r18, 0x0A	; 10
    11ea:	26 9f       	mul	r18, r22
    11ec:	11 24       	eor	r1, r1
    11ee:	30 19       	sub	r19, r0
    11f0:	30 5d       	subi	r19, 0xD0	; 208
    11f2:	31 93       	st	Z+, r19
    11f4:	de f6       	brtc	.-74     	; 0x11ac <__ultoa_invert+0xe>
    11f6:	cf 01       	movw	r24, r30
    11f8:	08 95       	ret
    11fa:	46 2f       	mov	r20, r22
    11fc:	47 70       	andi	r20, 0x07	; 7
    11fe:	40 5d       	subi	r20, 0xD0	; 208
    1200:	41 93       	st	Z+, r20
    1202:	b3 e0       	ldi	r27, 0x03	; 3
    1204:	0f d0       	rcall	.+30     	; 0x1224 <__ultoa_invert+0x86>
    1206:	c9 f7       	brne	.-14     	; 0x11fa <__ultoa_invert+0x5c>
    1208:	f6 cf       	rjmp	.-20     	; 0x11f6 <__ultoa_invert+0x58>
    120a:	46 2f       	mov	r20, r22
    120c:	4f 70       	andi	r20, 0x0F	; 15
    120e:	40 5d       	subi	r20, 0xD0	; 208
    1210:	4a 33       	cpi	r20, 0x3A	; 58
    1212:	18 f0       	brcs	.+6      	; 0x121a <__ultoa_invert+0x7c>
    1214:	49 5d       	subi	r20, 0xD9	; 217
    1216:	31 fd       	sbrc	r19, 1
    1218:	40 52       	subi	r20, 0x20	; 32
    121a:	41 93       	st	Z+, r20
    121c:	02 d0       	rcall	.+4      	; 0x1222 <__ultoa_invert+0x84>
    121e:	a9 f7       	brne	.-22     	; 0x120a <__ultoa_invert+0x6c>
    1220:	ea cf       	rjmp	.-44     	; 0x11f6 <__ultoa_invert+0x58>
    1222:	b4 e0       	ldi	r27, 0x04	; 4
    1224:	a6 95       	lsr	r26
    1226:	97 95       	ror	r25
    1228:	87 95       	ror	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	ba 95       	dec	r27
    1230:	c9 f7       	brne	.-14     	; 0x1224 <__ultoa_invert+0x86>
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	61 05       	cpc	r22, r1
    1236:	71 05       	cpc	r23, r1
    1238:	08 95       	ret
    123a:	9b 01       	movw	r18, r22
    123c:	ac 01       	movw	r20, r24
    123e:	0a 2e       	mov	r0, r26
    1240:	06 94       	lsr	r0
    1242:	57 95       	ror	r21
    1244:	47 95       	ror	r20
    1246:	37 95       	ror	r19
    1248:	27 95       	ror	r18
    124a:	ba 95       	dec	r27
    124c:	c9 f7       	brne	.-14     	; 0x1240 <__ultoa_invert+0xa2>
    124e:	62 0f       	add	r22, r18
    1250:	73 1f       	adc	r23, r19
    1252:	84 1f       	adc	r24, r20
    1254:	95 1f       	adc	r25, r21
    1256:	a0 1d       	adc	r26, r0
    1258:	08 95       	ret

0000125a <_exit>:
    125a:	f8 94       	cli

0000125c <__stop_program>:
    125c:	ff cf       	rjmp	.-2      	; 0x125c <__stop_program>
